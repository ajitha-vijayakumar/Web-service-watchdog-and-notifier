"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rpcErrorRe = exports.NetworkMigrateError = exports.FileMigrateError = exports.FloodTestPhoneWaitError = exports.FloodWaitError = exports.SlowModeWaitError = exports.PhoneMigrateError = exports.UserMigrateError = void 0;
const RPCBaseErrors_1 = require("./RPCBaseErrors");
class UserMigrateError extends RPCBaseErrors_1.InvalidDCError {
    constructor(args) {
        const newDc = Number(args.capture || 0);
        super(`The user whose identity is being used to execute queries is associated with DC ${newDc}` + RPCBaseErrors_1.RPCError._fmtRequest(args.request), args.request);
        this.message = `The user whose identity is being used to execute queries is associated with DC ${newDc}` + RPCBaseErrors_1.RPCError._fmtRequest(args.request);
        this.newDc = newDc;
    }
}
exports.UserMigrateError = UserMigrateError;
class PhoneMigrateError extends RPCBaseErrors_1.InvalidDCError {
    constructor(args) {
        const newDc = Number(args.capture || 0);
        super(`The phone number a user is trying to use for authorization is associated with DC ${newDc}` + RPCBaseErrors_1.RPCError._fmtRequest(args.request), args.request);
        this.message = `The phone number a user is trying to use for authorization is associated with DC ${newDc}` + RPCBaseErrors_1.RPCError._fmtRequest(args.request);
        this.newDc = newDc;
    }
}
exports.PhoneMigrateError = PhoneMigrateError;
class SlowModeWaitError extends RPCBaseErrors_1.FloodError {
    constructor(args) {
        const seconds = Number(args.capture || 0);
        super(`A wait of ${seconds} seconds is required before sending another message in this chat` + RPCBaseErrors_1.RPCError._fmtRequest(args.request), args.request);
        this.message = `A wait of ${seconds} seconds is required before sending another message in this chat` + RPCBaseErrors_1.RPCError._fmtRequest(args.request);
        this.seconds = seconds;
    }
}
exports.SlowModeWaitError = SlowModeWaitError;
class FloodWaitError extends RPCBaseErrors_1.FloodError {
    constructor(args) {
        const seconds = Number(args.capture || 0);
        super(`A wait of ${seconds} seconds is required` + RPCBaseErrors_1.RPCError._fmtRequest(args.request), args.request);
        this.message = `A wait of ${seconds} seconds is required` + RPCBaseErrors_1.RPCError._fmtRequest(args.request);
        this.seconds = seconds;
    }
}
exports.FloodWaitError = FloodWaitError;
class FloodTestPhoneWaitError extends RPCBaseErrors_1.FloodError {
    constructor(args) {
        const seconds = Number(args.capture || 0);
        super(`A wait of ${seconds} seconds is required in the test servers` + RPCBaseErrors_1.RPCError._fmtRequest(args.request), args.request);
        this.message = `A wait of ${seconds} seconds is required in the test servers` + RPCBaseErrors_1.RPCError._fmtRequest(args.request);
        this.seconds = seconds;
    }
}
exports.FloodTestPhoneWaitError = FloodTestPhoneWaitError;
class FileMigrateError extends RPCBaseErrors_1.InvalidDCError {
    constructor(args) {
        const newDc = Number(args.capture || 0);
        super(`The file to be accessed is currently stored in DC ${newDc}` + RPCBaseErrors_1.RPCError._fmtRequest(args.request), args.request);
        this.message = `The file to be accessed is currently stored in DC ${newDc}` + RPCBaseErrors_1.RPCError._fmtRequest(args.request);
        this.newDc = newDc;
    }
}
exports.FileMigrateError = FileMigrateError;
class NetworkMigrateError extends RPCBaseErrors_1.InvalidDCError {
    constructor(args) {
        const newDc = Number(args.capture || 0);
        super(`The source IP address is associated with DC ${newDc}` + RPCBaseErrors_1.RPCError._fmtRequest(args.request), args.request);
        this.message = `The source IP address is associated with DC ${newDc}` + RPCBaseErrors_1.RPCError._fmtRequest(args.request);
        this.newDc = newDc;
    }
}
exports.NetworkMigrateError = NetworkMigrateError;
exports.rpcErrorRe = new Map([
    [/FILE_MIGRATE_(\d+)/, FileMigrateError],
    [/FLOOD_TEST_PHONE_WAIT_(\d+)/, FloodTestPhoneWaitError],
    [/FLOOD_WAIT_(\d+)/, FloodWaitError],
    [/PHONE_MIGRATE_(\d+)/, PhoneMigrateError],
    [/SLOWMODE_WAIT_(\d+)/, SlowModeWaitError],
    [/USER_MIGRATE_(\d+)/, UserMigrateError],
    [/NETWORK_MIGRATE_(\d+)/, NetworkMigrateError],
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUlBDRXJyb3JMaXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2Vycm9ycy9SUENFcnJvckxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbURBQXFFO0FBR3JFLE1BQWEsZ0JBQWlCLFNBQVEsOEJBQWM7SUFHaEQsWUFBWSxJQUFTO1FBQ2pCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxrRkFBa0YsS0FBSyxFQUFFLEdBQUcsd0JBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwSixJQUFJLENBQUMsT0FBTyxHQUFHLGtGQUFrRixLQUFLLEVBQUUsR0FBRyx3QkFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUksSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDdEIsQ0FBQztDQUNKO0FBVEQsNENBU0M7QUFHRCxNQUFhLGlCQUFrQixTQUFRLDhCQUFjO0lBR2pELFlBQVksSUFBUztRQUNqQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN4QyxLQUFLLENBQUMsb0ZBQW9GLEtBQUssRUFBRSxHQUFHLHdCQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEosSUFBSSxDQUFDLE9BQU8sR0FBRyxvRkFBb0YsS0FBSyxFQUFFLEdBQUcsd0JBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hKLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ3RCLENBQUM7Q0FDSjtBQVRELDhDQVNDO0FBRUQs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