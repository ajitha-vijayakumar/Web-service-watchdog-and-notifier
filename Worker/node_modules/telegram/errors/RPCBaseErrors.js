"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimedOutError = exports.ServerError = exports.FloodError = exports.AuthKeyError = exports.NotFoundError = exports.ForbiddenError = exports.UnauthorizedError = exports.BadRequestError = exports.InvalidDCError = exports.RPCError = void 0;
class RPCError extends Error {
    constructor(message, request, code) {
        super('RPCError {0}: {1}{2}'
            .replace('{0}', (code === null || code === void 0 ? void 0 : code.toString()) || '')
            .replace('{1}', message || '')
            .replace('{2}', RPCError._fmtRequest(request)));
        this.code = code;
        this.message = message;
    }
    static _fmtRequest(request) {
        // TODO fix this
        if (request) {
            return ` (caused by ${request.className})`;
        }
        else {
            return '';
        }
    }
}
exports.RPCError = RPCError;
/**
 * The request must be repeated, but directed to a different data center.
 */
class InvalidDCError extends RPCError {
    constructor(message, request, code) {
        super(message, request, code);
        this.code = code || 303;
        this.message = message || 'ERROR_SEE_OTHER';
    }
}
exports.InvalidDCError = InvalidDCError;
/**
 * The query contains errors. In the event that a request was created
 * using a form and contains user generated data, the user should be
 * notified that the data must be corrected before the query is repeated.
 */
class BadRequestError extends RPCError {
    constructor() {
        super(...arguments);
        this.code = 400;
        this.message = 'BAD_REQUEST';
    }
}
exports.BadRequestError = BadRequestError;
/**
 * There was an unauthorized attempt to use functionality available only
 * to authorized users.
 */
class UnauthorizedError extends RPCError {
    constructor() {
        super(...arguments);
        this.code = 401;
        this.message = 'UNAUTHORIZED';
    }
}
exports.UnauthorizedError = UnauthorizedError;
/**
 * Privacy violation. For example, an attempt to write a message to
 * someone who has blacklisted the current user.
 */
class ForbiddenError extends RPCError {
    constructor() {
        super(...arguments);
        this.code = 403;
        this.message = 'FORBIDDEN';
    }
}
exports.ForbiddenError = ForbiddenError;
/**
 * An attempt to invoke a non-existent object, such as a method.
 */
class NotFoundError extends RPCError {
    constructor() {
        super(...arguments);
        this.code = 404;
        this.message = 'NOT_FOUND';
    }
}
exports.NotFoundError = NotFoundError;
/**
 * Errors related to invalid authorization key, like
 * AUTH_KEY_DUPLICATED which can cause the connection to fail.
 */
class AuthKeyError extends RPCError {
    constructor() {
        super(...arguments);
        this.code = 406;
        this.message = 'AUTH_KEY';
    }
}
exports.AuthKeyError = AuthKeyError;
/**
 * The maximum allowed number of attempts to invoke the given method
 * with the given input parameters has been exceeded. For example, in an
 * attempt to request a large number of text messages (SMS) for the same
 * phone number.
 */
class FloodError extends RPCError {
    constructor() {
        super(...arguments);
        this.code = 420;
        this.message = 'FLOOD';
    }
}
exports.FloodError = FloodError;
/**
 * An internal server error occurred while a request was being processed
 * for example, there was a disruption while accessing a database or file
 * storage
 */
class ServerError extends RPCError {
    constructor() {
        super(...arguments);
        this.code = 500; // Also witnessed as -500
        this.message = 'INTERNAL';
    }
}
exports.ServerError = ServerError;
/**
 * Clicking the inline buttons of bots that never (or take to long to)
 * call ``answerCallbackQuery`` will result in this "special" RPCError.
 */
class TimedOutError extends RPCError {
    constructor() {
        super(...arguments);
        this.code = 503; // Only witnessed as -503
        this.message = 'Timeout';
    }
}
exports.TimedOutError = TimedOutError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUlBDQmFzZUVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9lcnJvcnMvUlBDQmFzZUVycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFLQSxNQUFhLFFBQVMsU0FBUSxLQUFLO0lBRy9CLFlBQVksT0FBZSxFQUFFLE9BQXVCLEVBQUUsSUFBYTtRQUMvRCxLQUFLLENBQ0Qsc0JBQXNCO2FBQ2pCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsUUFBUSxFQUFFLEtBQUksRUFBRSxDQUFDO2FBQ3RDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxJQUFFLEVBQUUsQ0FBQzthQUMzQixPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FDckQsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQXVCO1FBQ3RDLGdCQUFnQjtRQUNoQixJQUFJLE9BQU8sRUFBRTtZQUNULE9BQU8sZUFBZSxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUE7U0FDN0M7YUFBTTtZQUNILE9BQU8sRUFBRSxDQUFBO1NBQ1o7SUFDTCxDQUFDO0NBQ0o7QUF0QkQsNEJBc0JDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGNBQWUsU0FBUSxRQUFRO0lBQ3hDLFlBQVksT0FBYyxFQUFDLE9BQXNCLEVBQUUsSUFBYTtRQUM1RCxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxHQUFHLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksaUJBQWlCLENBQUE7SUFDL0MsQ0FBQztDQUNKO0FBTkQsd0NBTUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBYSxlQUFnQixTQUFRLFFBQVE7SUFBN0M7O1FBQ0ksU0FBSSxHQUFHLEdBQUcsQ0FBQztRQUNYLFlBQU8sR0FBRyxhQUFhLENBQUE7SUFDM0IsQ0FBQztDQUFBO0FBSEQsMENBR0M7QUFFRDs7O0dBR0c7QUFDSCxNQUFhLGlCQUFrQixTQUFRLFFBQVE7SUFBL0M7O1FBQ0ksU0FBSSxHQUFHLEdBQUcsQ0FBQztRQUNYLFlBQU8sR0FBRyxjQUFjLENBQUE7SUFDNUIsQ0FBQztDQUFBO0FBSEQsOENBR0M7QUFFRDs7O0dBR0c7QUFDSCxNQUFhLGNBQWUsU0FBUSxRQUFRO0lBQTVDOztRQUNJLFNBQUksR0FBRyxHQUFHLENBQUM7UUFDWCxZQUFPLEdBQUcsV0FBVyxDQUFBO0lBQ3pCLENBQUM7Q0FBQTtBQUhELHdDQUdDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGFBQWMsU0FBUSxRQUFRO0lBQTNDOztRQUNJLFNBQUksR0FBRyxHQUFHLENBQUM7UUFDWCxZQUFPLEdBQUcsV0FBVyxDQUFBO0lBQ3pCLENBQUM7Q0FBQTtBQUhELHNDQUdDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsUUFBUTtJQUExQzs7UUFDSSxTQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ1gsWUFBTyxHQUFHLFVBQVUsQ0FBQTtJQUN4QixDQUFDO0NBQUE7QUFIRCxvQ0FHQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsUUFBUTtJQUF4Qzs7UUFDSSxTQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ1gsWUFBTyxHQUFHLE9BQU8sQ0FBQTtJQUNyQixDQUFDO0NBQUE7QUFIRCxnQ0FHQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFhLFdBQVksU0FBUSxRQUFRO0lBQXpDOztRQUNJLFNBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyx5QkFBeUI7UUFDckMsWUFBTyxHQUFHLFVBQVUsQ0FBQTtJQUN4QixDQUFDO0NBQUE7QUFIRCxrQ0FHQztBQUVEOzs7R0FHRztBQUNILE1BQWEsYUFBYyxTQUFRLFFBQVE7SUFBM0M7O1FBQ0ksU0FBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLHlCQUF5QjtRQUNyQyxZQUFPLEdBQUcsU0FBUyxDQUFBO0lBQ3ZCLENBQUM7Q0FBQTtBQUhELHNDQUdDIn0=