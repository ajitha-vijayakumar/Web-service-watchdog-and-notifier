"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromisedNetSockets = void 0;
const net_1 = require("net");
const async_mutex_1 = require("async-mutex");
const mutex = new async_mutex_1.Mutex();
const closeError = new Error('NetSocket was closed');
class PromisedNetSockets {
    constructor() {
        this.client = undefined;
        this.closed = true;
        this.stream = Buffer.alloc(0);
    }
    readExactly(number) {
        return __awaiter(this, void 0, void 0, function* () {
            let readData = Buffer.alloc(0);
            while (true) {
                const thisTime = yield this.read(number);
                readData = Buffer.concat([readData, thisTime]);
                number = number - thisTime.length;
                if (!number) {
                    return readData;
                }
            }
        });
    }
    read(number) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.closed) {
                throw closeError;
            }
            yield this.canRead;
            if (this.closed) {
                throw closeError;
            }
            const toReturn = this.stream.slice(0, number);
            this.stream = this.stream.slice(number);
            if (this.stream.length === 0) {
                this.canRead = new Promise(resolve => {
                    this.resolveRead = resolve;
                });
            }
            return toReturn;
        });
    }
    readAll() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.closed || !(yield this.canRead)) {
                throw closeError;
            }
            const toReturn = this.stream;
            this.stream = Buffer.alloc(0);
            this.canRead = new Promise(resolve => {
                this.resolveRead = resolve;
            });
            return toReturn;
        });
    }
    /**
     * Creates a new connection
     * @param port
     * @param ip
     * @returns {Promise<void>}
     */
    connect(port, ip) {
        return __awaiter(this, void 0, void 0, function* () {
            this.stream = Buffer.alloc(0);
            this.client = new net_1.Socket();
            this.canRead = new Promise(resolve => {
                this.resolveRead = resolve;
            });
            this.closed = false;
            return new Promise((resolve, reject) => {
                if (this.client) {
                    this.client.connect(port, ip, () => {
                        this.receive();
                        resolve(this);
                    });
                    this.client.on('error', reject);
                    this.client.on('close', () => {
                        if (this.client && this.client.destroyed) {
                            if (this.resolveRead) {
                                this.resolveRead(false);
                            }
                            this.closed = true;
                        }
                    });
                }
            });
        });
    }
    write(data) {
        if (this.closed) {
            throw closeError;
        }
        if (this.client) {
            this.client.write(data);
        }
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.client) {
                yield this.client.destroy();
                this.client.unref();
            }
            this.closed = true;
        });
    }
    receive() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.client) {
                this.client.on('data', (message) => __awaiter(this, void 0, void 0, function* () {
                    const release = yield mutex.acquire();
                    try {
                        let data;
                        //CONTEST BROWSER
                        this.stream = Buffer.concat([this.stream, message]);
                        if (this.resolveRead) {
                            this.resolveRead(true);
                        }
                    }
                    finally {
                        release();
                    }
                }));
            }
        });
    }
}
exports.PromisedNetSockets = PromisedNetSockets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvbWlzZWROZXRTb2NrZXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2V4dGVuc2lvbnMvUHJvbWlzZWROZXRTb2NrZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDZCQUEyQjtBQUMzQiw2Q0FBa0M7QUFFbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBSyxFQUFFLENBQUM7QUFFMUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUVyRCxNQUFhLGtCQUFrQjtJQU8zQjtRQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUssV0FBVyxDQUFDLE1BQWM7O1lBQzVCLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsT0FBTyxJQUFJLEVBQUU7Z0JBQ1QsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN6QyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxNQUFNLEdBQUcsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1QsT0FBTyxRQUFRLENBQUE7aUJBQ2xCO2FBQ0o7UUFDTCxDQUFDO0tBQUE7SUFFSyxJQUFJLENBQUMsTUFBYzs7WUFDckIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNiLE1BQU0sVUFBVSxDQUFBO2FBQ25CO1lBQ0QsTUFBTSxJQUFJLENBQUMsT0FBTyxD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