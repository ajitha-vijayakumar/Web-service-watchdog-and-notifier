"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageContainer = void 0;
const TLMessage_1 = require("./TLMessage");
class MessageContainer {
    constructor(messages) {
        this.CONSTRUCTOR_ID = 0x73f1f8dc;
        this.messages = messages;
        this.classType = 'constructor';
    }
    static fromReader(reader) {
        return __awaiter(this, void 0, void 0, function* () {
            const messages = [];
            const length = reader.readInt();
            for (let x = 0; x < length; x++) {
                const msgId = reader.readLong();
                const seqNo = reader.readInt();
                const length = reader.readInt();
                const before = reader.tellPosition();
                const obj = reader.tgReadObject();
                reader.setPosition(before + length);
                const tlMessage = new TLMessage_1.TLMessage(msgId, seqNo, obj);
                messages.push(tlMessage);
            }
            return new MessageContainer(messages);
        });
    }
}
exports.MessageContainer = MessageContainer;
MessageContainer.CONSTRUCTOR_ID = 0x73f1f8dc;
MessageContainer.classType = 'constructor';
// Maximum size in bytes for the inner payload of the container.
// Telegram will close the connection if the payload is bigger.
// The overhead of the container itself is subtracted.
MessageContainer.MAXIMUM_SIZE = 1044456 - 8;
// Maximum amount of messages that can't be sent inside a single
// container, inclusive. Beyond this limit Telegram will respond
// with BAD_MESSAGE 64 (invalid container).
//
// This limit is not 100% accurate and may in some cases be higher.
// However, sending up to 100 requests at once in a single container
// is a reasonable conservative value, since it could also depend on
// other factors like size per request, but we cannot know this.
MessageContainer.MAXIMUM_LENGTH = 100;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZUNvbnRhaW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2dyYW1qcy90bC9jb3JlL01lc3NhZ2VDb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQXNDO0FBR3RDLE1BQWEsZ0JBQWdCO0lBcUJ6QixZQUFZLFFBQWU7UUFFdkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUE7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBTyxVQUFVLENBQUMsTUFBb0I7O1lBQ3hDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUNwQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDN0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNoQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQy9CLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUNyQyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ2xDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLHFCQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDbkQsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTthQUMzQjtZQUNELE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN6QyxDQUFDO0tBQUE7O0FBMUNMLDRDQTJDQztBQTFDVSwrQkFBYyxHQUFHLFVBQVUsQ0FBQztBQUM1QiwwQkFBUyxHQUFHLGFBQWEsQ0FBQztBQUNqQyxnRUFBZ0U7QUFDaEUsK0RBQStEO0FBQy9ELHNEQUFzRDtBQUMvQyw2QkFBWSxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFFbEMsZ0VBQWdFO0FBQ2hFLGdFQUFnRTtBQUNoRSwyQ0FBMkM7QUFDM0MsRUFBRTtBQUNGLG1FQUFtRTtBQUNuRSxvRUFBb0U7QUFDcEUsb0VBQW9FO0FBQ3BFLGdFQUFnRTtBQUN6RCwrQkFBYyxHQUFHLEdBQUcsQ0FBQyJ9