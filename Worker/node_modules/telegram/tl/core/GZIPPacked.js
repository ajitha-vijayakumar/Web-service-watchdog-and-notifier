"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GZIPPacked = void 0;
const __1 = require("../");
const pako_1 = require("pako");
class GZIPPacked {
    constructor(data) {
        this.data = data;
        this.CONSTRUCTOR_ID = 0x3072cfa1;
        this.classType = 'constructor';
    }
    static gzipIfSmaller(contentRelated, data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (contentRelated && data.length > 512) {
                const gzipped = yield (new GZIPPacked(data)).toBytes();
                if (gzipped.length < data.length) {
                    return gzipped;
                }
            }
            return data;
        });
    }
    static gzip(input) {
        return Buffer.from(input);
        // TODO this usually makes it faster for large requests
        //return Buffer.from(deflate(input, { level: 9, gzip: true }))
    }
    static ungzip(input) {
        return Buffer.from(pako_1.inflate(input));
    }
    toBytes() {
        return __awaiter(this, void 0, void 0, function* () {
            const g = Buffer.alloc(4);
            g.writeUInt32LE(GZIPPacked.CONSTRUCTOR_ID, 0);
            return Buffer.concat([
                g,
                __1.serializeBytes(yield GZIPPacked.gzip(this.data)),
            ]);
        });
    }
    static read(reader) {
        return __awaiter(this, void 0, void 0, function* () {
            const constructor = reader.readInt(false);
            if (constructor !== GZIPPacked.CONSTRUCTOR_ID) {
                throw new Error('not equal');
            }
            return yield GZIPPacked.gzip(reader.tgReadBytes());
        });
    }
    static fromReader(reader) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = reader.tgReadBytes();
            return new GZIPPacked(yield GZIPPacked.ungzip(data));
        });
    }
}
exports.GZIPPacked = GZIPPacked;
GZIPPacked.CONSTRUCTOR_ID = 0x3072cfa1;
GZIPPacked.classType = 'constructor';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR1pJUFBhY2tlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2dyYW1qcy90bC9jb3JlL0daSVBQYWNrZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMkJBQW1DO0FBQ25DLCtCQUE2QjtBQUc3QixNQUFhLFVBQVU7SUFPbkIsWUFBWSxJQUFZO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFBO0lBQ2xDLENBQUM7SUFFRCxNQUFNLENBQU8sYUFBYSxDQUFDLGNBQXVCLEVBQUUsSUFBWTs7WUFDNUQsSUFBSSxjQUFjLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7Z0JBQ3JDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUN2RCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDOUIsT0FBTyxPQUFPLENBQUE7aUJBQ2pCO2FBQ0o7WUFDRCxPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7S0FBQTtJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBYTtRQUNyQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDekIsdURBQXVEO1FBQ3ZELDhEQUE4RDtJQUNsRSxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFhO1FBQ3ZCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBRUssT0FBTzs7WUFDVCxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM5QyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ2pCLENBQUM7Z0JBQ0Qsa0JBQWMsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ25ELENBQUMsQ0FBQTtRQUNOLENBQUM7S0FBQTtJQUVELE1BQU0sQ0FBTyxJQUFJLENBQUMsTUFBb0I7O1lBQ2xDLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUMsSUFBSSxXQUFXLEtBQUssVUFBVSxDQUFDLGNBQWMsRUFBRTtnQkFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTthQUMvQjtZQUNELE9BQU8sTUFBTSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFBO1FBQ3RELENBQUM7S0FBQTtJQUVELE1BQU0sQ0FBTyxVQUFVLENBQUMsTUFBb0I7O1lBQ3hDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNsQyxPQUFPLElBQUksVUFBVSxDQUFDLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3hELENBQUM7S0FBQTs7QUFyREwsZ0NBc0RDO0FBckRVLHlCQUFjLEdBQUcsVUFBVSxDQUFDO0FBQzVCLG9CQUFTLEdBQUcsYUFBYSxDQUFDIn0=