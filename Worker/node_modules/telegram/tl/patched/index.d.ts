import { Api } from "../api";
import { Message as _Message } from "../custom/message";
declare const MessageEmpty_base: import("ts-mixer/dist/types").Class<[args: {
    id: number;
}], _Message & Api.MessageEmpty, {
    prototype: _Message;
    initClass: typeof import("../custom/senderGetter").SenderGetter.initClass & typeof import("../custom").ChatGetter.initClass;
} & {
    prototype: Api.MessageEmpty;
    CONSTRUCTOR_ID: number;
    SUBCLASS_OF_ID: number;
    className: string;
    classType: "constructor" | "request";
    serializeBytes: typeof Api.VirtualClass.serializeBytes;
    serializeDate: typeof Api.VirtualClass.serializeDate;
    fromReader: typeof Api.VirtualClass.fromReader;
}>;
declare class MessageEmpty extends MessageEmpty_base {
}
declare const MessageService_base: import("ts-mixer/dist/types").Class<[args: {
    out?: boolean | undefined;
    mentioned?: boolean | undefined;
    mediaUnread?: boolean | undefined;
    silent?: boolean | undefined;
    post?: boolean | undefined;
    legacy?: boolean | undefined;
    id: number;
    fromId?: Api.TypePeer | undefined;
    peerId: Api.TypePeer;
    replyTo?: Api.MessageReplyHeader | undefined;
    date: number;
    action: Api.TypeMessageAction;
}], _Message & Api.MessageService, {
    prototype: _Message;
    initClass: typeof import("../custom/senderGetter").SenderGetter.initClass & typeof import("../custom").ChatGetter.initClass;
} & {
    prototype: Api.MessageService;
    CONSTRUCTOR_ID: number;
    SUBCLASS_OF_ID: number;
    className: string;
    classType: "constructor" | "request";
    serializeBytes: typeof Api.VirtualClass.serializeBytes;
    serializeDate: typeof Api.VirtualClass.serializeDate;
    fromReader: typeof Api.VirtualClass.fromReader;
}>;
declare class MessageService extends MessageService_base {
}
declare const Message_base: import("ts-mixer/dist/types").Class<[args: {
    out?: boolean | undefined;
    mentioned?: boolean | undefined;
    mediaUnread?: boolean | undefined;
    silent?: boolean | undefined;
    post?: boolean | undefined;
    fromScheduled?: boolean | undefined;
    legacy?: boolean | undefined;
    editHide?: boolean | undefined;
    pinned?: boolean | undefined;
    id: number;
    fromId?: Api.TypePeer | undefined;
    peerId: Api.TypePeer;
    fwdFrom?: Api.MessageFwdHeader | undefined;
    viaBotId?: number | undefined;
    replyTo?: Api.MessageReplyHeader | undefined;
    date: number;
    message: string;
    media?: Api.TypeMessageMedia | undefined;
    replyMarkup?: Api.TypeReplyMarkup | undefined;
    entities?: Api.TypeMessageEntity[] | undefined;
    views?: number | undefined;
    forwards?: number | undefined;
    replies?: Api.MessageReplies | undefined;
    editDate?: number | undefined;
    postAuthor?: string | undefined;
    groupedId?: import("big-integer").BigInteger | undefined;
    restrictionReason?: Api.RestrictionReason[] | undefined;
}], _Message & Api.Message, {
    prototype: _Message;
    initClass: typeof import("../custom/senderGetter").SenderGetter.initClass & typeof import("../custom").ChatGetter.initClass;
} & {
    prototype: Api.Message;
    CONSTRUCTOR_ID: number;
    SUBCLASS_OF_ID: number;
    className: string;
    classType: "constructor" | "request";
    serializeBytes: typeof Api.VirtualClass.serializeBytes;
    serializeDate: typeof Api.VirtualClass.serializeDate;
    fromReader: typeof Api.VirtualClass.fromReader;
}>;
declare class Message extends Message_base {
}
export declare function patchAll(): void;
export { Message, MessageService, MessageEmpty };
