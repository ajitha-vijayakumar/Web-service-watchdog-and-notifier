import { SenderGetter } from "./senderGetter";
import type { Entity, EntityLike } from "../../define";
import { Api } from "../api";
import type { TelegramClient } from "../../client/TelegramClient";
import { ChatGetter } from "./chatGetter";
import { Forward } from "./forward";
import type { File } from "./file";
interface MessageBaseInterface {
    id: any;
    peerId?: any;
    date?: any;
    out?: any;
    mentioned?: any;
    mediaUnread?: any;
    silent?: any;
    post?: any;
    fromId?: any;
    replyTo?: any;
    message?: any;
    fwdFrom?: any;
    viaBotId?: any;
    media?: any;
    replyMarkup?: any;
    entities?: any;
    views?: any;
    editDate?: any;
    postAuthor?: any;
    groupedId?: any;
    fromScheduled?: any;
    legacy?: any;
    editHide?: any;
    pinned?: any;
    restrictionReason?: any;
    forwards?: any;
    replies?: any;
    action?: any;
    _entities?: Map<number, Entity>;
}
declare const Message_base: import("ts-mixer/dist/types").Class<[import("./chatGetter").ChatGetterConstructorParams], SenderGetter & ChatGetter, {
    prototype: SenderGetter;
    initClass: typeof SenderGetter.initClass;
} & {
    prototype: ChatGetter;
    initClass: typeof ChatGetter.initClass;
}>;
export declare class Message extends Message_base {
    out?: boolean;
    mentioned?: boolean;
    mediaUnread?: boolean;
    silent?: boolean;
    post: boolean;
    fromScheduled: any | undefined;
    legacy: any | undefined;
    editHide: any | undefined;
    id: number;
    fromId?: EntityLike;
    peerId: any;
    fwdFrom: Api.TypeMessageFwdHeader;
    viaBotId: any;
    replyTo: Api.MessageReplyHeader;
    date: any | undefined;
    message: string;
    media: any;
    replyMarkup: any | undefined;
    entities: any | undefined;
    views: any | undefined;
    forwards: any | undefined;
    replies: any | undefined;
    editDate: any;
    pinned: any | undefined;
    postAuthor: any;
    groupedId: any;
    restrictionReason: any;
    action: any | undefined;
    _actionEntities: any;
    _client?: TelegramClient;
    _text?: string;
    _file?: File;
    _replyMessage: undefined;
    _buttons: undefined;
    _buttonsFlat: undefined;
    _buttonsCount: number;
    _viaBot?: EntityLike;
    _viaInputBot?: EntityLike;
    _inputSender: any;
    _forward?: Forward;
    _sender: any;
    _entities: Map<number, Entity>;
    patternMatch?: RegExpMatchArray;
    constructor({ id, peerId, date, out, mentioned, mediaUnread, silent, post, fromId, replyTo, message, fwdFrom, viaBotId, media, replyMarkup, entities, views, editDate, postAuthor, groupedId, fromScheduled, legacy, editHide, pinned, restrictionReason, forwards, replies, action, _entities, }: MessageBaseInterface);
    _finishInit(client: TelegramClient, entities: Map<number, Entity>, inputChat?: EntityLike): void;
    get client(): TelegramClient | undefined;
    get text(): string;
    set text(value: string);
    get rawText(): string;
    /**
     * @param {string} value
     */
    set rawText(value: string);
    get isReply(): boolean;
    get forward(): Forward | undefined;
}
export interface Message extends ChatGetter, SenderGetter {
}
export {};
