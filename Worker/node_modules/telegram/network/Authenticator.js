"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doAuthentication = void 0;
/**
 * Executes the authentication process with the Telegram servers.
 * @param sender a connected {MTProtoPlainSender}.
 * @param log
 * @returns {Promise<{authKey: *, timeOffset: *}>}
 */
const tl_1 = require("../tl");
const errors_1 = require("../errors");
const Factorizator_1 = require("../crypto/Factorizator");
const IGE_1 = require("../crypto/IGE");
const extensions_1 = require("../extensions");
const AuthKey_1 = require("../crypto/AuthKey");
const __1 = require("../");
const RSA_1 = require("../crypto/RSA");
const big_integer_1 = __importDefault(require("big-integer"));
function doAuthentication(sender, log) {
    return __awaiter(this, void 0, void 0, function* () {
        // Step 1 sending: PQ Request, endianness doesn't matter since it's random
        let bytes = __1.helpers.generateRandomBytes(16);
        const nonce = __1.helpers.readBigIntFromBuffer(bytes, false, true);
        const resPQ = yield sender.send(new tl_1.Api.ReqPqMulti({ nonce: nonce }));
        log.debug('Starting authKey generation step 1');
        if (!(resPQ instanceof tl_1.Api.ResPQ)) {
            throw new Error(`Step 1 answer was ${resPQ}`);
        }
        if (resPQ.nonce.neq(nonce)) {
            throw new errors_1.SecurityError('Step 1 invalid nonce from server');
        }
        const pq = __1.helpers.readBigIntFromBuffer(resPQ.pq, false, true);
        log.debug('Finished authKey generation step 1');
        log.debug('Starting authKey generation step 2');
        // Step 2 sending: DH Exchange
        let { p, q } = Factorizator_1.Factorizator.factorize(pq);
        const pBuffer = __1.helpers.getByteArray(p);
        const qBuffer = __1.helpers.getByteArray(q);
        bytes = __1.helpers.generateRandomBytes(32);
        const newNonce = __1.helpers.readBigIntFromBuffer(bytes, true, true);
        const pqInnerData = new tl_1.Api.PQInnerData({
            pq: __1.helpers.getByteArray(pq),
            p: pBuffer,
            q: qBuffer,
            nonce: resPQ.nonce,
            serverNonce: resPQ.serverNonce,
            newNonce: newNonce,
        });
        // sha_digest + data + random_bytes
        let cipherText = undefined;
        let targetFingerprint = undefined;
        for (const fingerprint of resPQ.serverPublicKeyFingerprints) {
            cipherText = yield RSA_1.encrypt(fingerprint, pqInnerData.getBytes());
            if (cipherText !== undefined) {
                targetFingerprint = fingerprint;
                break;
            }
        }
        if (cipherText === undefined) {
            throw new errors_1.SecurityError('Step 2 could not find a valid key for fingerprints');
        }
        const serverDhParams = yield sender.send(new tl_1.Api.ReqDHParams({
            nonce: resPQ.nonce,
            serverNonce: resPQ.serverNonce,
            p: pBuffer,
            q: qBuffer,
            publicKeyFingerprint: targetFingerprint,
            encryptedData: cipherText,
        }));
        if (!(serverDhParams instanceof tl_1.Api.ServerDHParamsOk || serverDhParams instanceof tl_1.Api.ServerDHParamsFail)) {
            throw new Error(`Step 2.1 answer was ${serverDhParams}`);
        }
        if (serverDhParams.nonce.neq(resPQ.nonce)) {
            throw new errors_1.SecurityError('Step 2 invalid nonce from server');
        }
        if (serverDhParams.serverNonce.neq(resPQ.serverNonce)) {
            throw new errors_1.SecurityError('Step 2 invalid server nonce from server');
        }
        if (serverDhParams instanceof tl_1.Api.ServerDHParamsFail) {
            const sh = yield __1.helpers.sha1(__1.helpers.toSignedLittleBuffer(newNonce, 32).slice(4, 20));
            const nnh = __1.helpers.readBigIntFromBuffer(sh, true, true);
            if (serverDhParams.newNonceHash.neq(nnh)) {
                throw new errors_1.SecurityError('Step 2 invalid DH fail nonce from server');
            }
        }
        if (!(serverDhParams instanceof tl_1.Api.ServerDHParamsOk)) {
            throw new Error(`Step 2.2 answer was ${serverDhParams}`);
        }
        log.debug('Finished authKey generation step 2');
        log.debug('Starting authKey generation step 3');
        // Step 3 sending: Complete DH Exchange
        const { key, iv } = yield __1.helpers.generateKeyDataFromNonce(resPQ.serverNonce, newNonce);
        if (serverDhParams.encryptedAnswer.length % 16 !== 0) {
            // See PR#453
            throw new errors_1.SecurityError('Step 3 AES block size mismatch');
        }
        const ige = new IGE_1.IGE(key, iv);
        const plainTextAnswer = ige.decryptIge(serverDhParams.encryptedAnswer);
        const reader = new extensions_1.BinaryReader(plainTextAnswer);
        reader.read(20); // hash sum
        const serverDhInner = reader.tgReadObject();
        if (!(serverDhInner instanceof tl_1.Api.ServerDHInnerData)) {
            throw new Error(`Step 3 answer was ${serverDhInner}`);
        }
        if (serverDhInner.nonce.neq(resPQ.nonce)) {
            throw new errors_1.SecurityError('Step 3 Invalid nonce in encrypted answer');
        }
        if (serverDhInner.serverNonce.neq(resPQ.serverNonce)) {
            throw new errors_1.SecurityError('Step 3 Invalid server nonce in encrypted answer');
        }
        const dhPrime = __1.helpers.readBigIntFromBuffer(serverDhInner.dhPrime, false, false);
        const ga = __1.helpers.readBigIntFromBuffer(serverDhInner.gA, false, false);
        const timeOffset = serverDhInner.serverTime - Math.floor(new Date().getTime() / 1000);
        const b = __1.helpers.readBigIntFromBuffer(__1.helpers.generateRandomBytes(256), false, false);
        const gb = __1.helpers.modExp(big_integer_1.default(serverDhInner.g), b, dhPrime);
        const gab = __1.helpers.modExp(ga, b, dhPrime);
        // Prepare client DH Inner Data
        const clientDhInner = new tl_1.Api.ClientDHInnerData({
            nonce: resPQ.nonce,
            serverNonce: resPQ.serverNonce,
            retryId: big_integer_1.default.zero,
            gB: __1.helpers.getByteArray(gb, false),
        }).getBytes();
        const clientDdhInnerHashed = Buffer.concat([yield __1.helpers.sha1(clientDhInner), clientDhInner]);
        // Encryption
        const clientDhEncrypted = ige.encryptIge(clientDdhInnerHashed);
        const dhGen = yield sender.send(new tl_1.Api.SetClientDHParams({
            nonce: resPQ.nonce,
            serverNonce: resPQ.serverNonce,
            encryptedData: clientDhEncrypted,
        }));
        const nonceTypes = [tl_1.Api.DhGenOk, tl_1.Api.DhGenRetry, tl_1.Api.DhGenFail];
        // TS being weird again.
        const nonceTypesString = ['DhGenOk', 'DhGenRetry', 'DhGenFail'];
        if (!(dhGen instanceof nonceTypes[0] || dhGen instanceof nonceTypes[1] || dhGen instanceof nonceTypes[2])) {
            throw new Error(`Step 3.1 answer was ${dhGen}`);
        }
        const { name } = dhGen.constructor;
        if (dhGen.nonce.neq(resPQ.nonce)) {
            throw new errors_1.SecurityError(`Step 3 invalid ${name} nonce from server`);
        }
        if (dhGen.serverNonce.neq(resPQ.serverNonce)) {
            throw new errors_1.SecurityError(`Step 3 invalid ${name} server nonce from server`);
        }
        const authKey = new AuthKey_1.AuthKey();
        yield authKey.setKey(__1.helpers.getByteArray(gab));
        const nonceNumber = 1 + nonceTypesString.indexOf(dhGen.className);
        const newNonceHash = yield authKey.calcNewNonceHash(newNonce, nonceNumber);
        // @ts-ignore
        const dhHash = dhGen[`newNonceHash${nonceNumber}`];
        if (dhHash.neq(newNonceHash)) {
            throw new errors_1.SecurityError('Step 3 invalid new nonce hash');
        }
        if (!(dhGen instanceof tl_1.Api.DhGenOk)) {
            throw new Error(`Step 3.2 answer was ${dhGen}`);
        }
        log.debug('Finished authKey generation step 3');
        return { authKey, timeOffset };
    });
}
exports.doAuthentication = doAuthentication;
//# sourceMappingURL=data:application/json;base64,