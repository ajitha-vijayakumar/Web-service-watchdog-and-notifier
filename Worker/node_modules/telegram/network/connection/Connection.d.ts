/// <reference types="node" />
import { PromisedNetSockets, PromisedWebSockets } from '../../extensions';
/**
 * The `Connection` class is a wrapper around ``asyncio.open_connection``.
 *
 * Subclasses will implement different transport modes as atomic operations,
 * which this class eases doing since the exposed interface simply puts and
 * gets complete data payloads to and from queues.
 *
 * The only error that will raise from send and receive methods is
 * ``ConnectionError``, which will raise when attempting to send if
 * the client is disconnected (includes remote disconnections).
 */
declare class Connection {
    PacketCodecClass: any;
    private _ip;
    private _port;
    private _dcId;
    private _log;
    private _connected;
    private _sendTask?;
    private _recvTask?;
    protected _codec: any;
    protected _obfuscation: any;
    private _sendArray;
    private _recvArray;
    protected socket: PromisedNetSockets | PromisedWebSockets;
    constructor(ip: string, port: number, dcId: number, loggers: any);
    _connect(): Promise<void>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    send(data: Buffer): Promise<void>;
    recv(): Promise<any>;
    _sendLoop(): Promise<void>;
    _recvLoop(): Promise<void>;
    _initConn(): Promise<void>;
    _send(data: Buffer): Promise<void>;
    _recv(): Promise<any>;
    toString(): string;
}
declare class ObfuscatedConnection extends Connection {
    ObfuscatedIO: any;
    _initConn(): Promise<void>;
    _send(data: Buffer): Promise<void>;
    _recv(): Promise<any>;
}
declare class PacketCodec {
    private _conn;
    constructor(connection: Buffer);
    encodePacket(data: Buffer): void;
    readPacket(reader: PromisedNetSockets | PromisedWebSockets): Promise<Buffer>;
}
export { Connection, PacketCodec, ObfuscatedConnection, };
