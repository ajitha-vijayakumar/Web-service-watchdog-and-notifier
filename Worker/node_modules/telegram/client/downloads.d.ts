/// <reference types="node" />
import { Api } from '../tl';
import type { TelegramClient } from './TelegramClient';
export interface progressCallback {
    (progress: number, // Float between 0 and 1.
    ...args: any[]): void;
    isCanceled?: boolean;
    acceptsBuffer?: boolean;
}
export interface DownloadFileParams {
    dcId: number;
    fileSize: number;
    workers?: number;
    partSizeKb?: number;
    start?: number;
    end?: number;
    progressCallback?: progressCallback;
}
export declare function downloadFile(client: TelegramClient, inputLocation: Api.TypeInputFileLocation, fileParams: DownloadFileParams): Promise<Buffer>;
export interface DownloadMediaInterface {
    sizeType?: string;
    /** where to start downloading **/
    start?: number;
    /** where to stop downloading **/
    end?: number;
    progressCallback?: progressCallback;
    workers?: number;
}
export declare function downloadMedia(client: TelegramClient, messageOrMedia: Api.Message | Api.TypeMessageMedia, args: DownloadMediaInterface): Promise<Buffer>;
export declare function _downloadDocument(client: TelegramClient, doc: Api.MessageMediaDocument | Api.Document, args: DownloadMediaInterface): Promise<Buffer>;
export declare function _downloadContact(client: TelegramClient, media: Api.MessageMediaContact, args: DownloadMediaInterface): Promise<Buffer>;
export declare function _downloadWebDocument(client: TelegramClient, media: Api.WebDocument | Api.WebDocumentNoProxy, args: DownloadMediaInterface): Promise<Buffer>;
export declare function _downloadCachedPhotoSize(client: TelegramClient, size: Api.PhotoCachedSize | Api.PhotoStrippedSize): Buffer;
export declare function _downloadPhoto(client: TelegramClient, photo: Api.MessageMediaPhoto | Api.Photo, args: DownloadMediaInterface): Promise<Buffer>;
