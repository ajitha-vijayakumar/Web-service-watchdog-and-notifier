import { Api } from '../tl';
import type { TelegramClient } from './TelegramClient';
import type { EntityLike, FileLike, MessageIDLike } from "../define";
interface OnProgress {
    (progress: number): void;
    isCanceled?: boolean;
}
export interface UploadFileParams {
    file: File | CustomFile;
    workers: number;
    onProgress?: OnProgress;
}
export declare class CustomFile {
    name: string;
    size: number;
    path: string;
    constructor(name: string, size: number, path: string);
}
export declare function uploadFile(client: TelegramClient, fileParams: UploadFileParams): Promise<Api.InputFile | Api.InputFileBig>;
export interface SendFileInterface {
    file: string | CustomFile | File;
    caption?: string;
    forceDocument?: boolean;
    fileSize?: number;
    progressCallback?: OnProgress;
    replyTo?: MessageIDLike;
    attributes?: Api.TypeDocumentAttribute[];
    thumb?: FileLike;
    voiceNote?: boolean;
    videoNote?: boolean;
    supportStreaming?: boolean;
}
export declare function sendFile(client: TelegramClient, entity: EntityLike, { file, caption, forceDocument, fileSize, progressCallback, replyTo, attributes, thumb, voiceNote, videoNote, supportStreaming }: SendFileInterface): Promise<Api.TypeUpdates>;
export {};
