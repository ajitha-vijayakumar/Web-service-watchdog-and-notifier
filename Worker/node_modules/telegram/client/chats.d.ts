import type { TelegramClient } from "./TelegramClient";
import type { EntityLike } from "../define";
import { TotalList } from '../Helpers';
import { RequestIter } from "../requestIter";
import { Api } from "../tl";
interface ParticipantsIterInterface {
    entity: EntityLike;
    filter: any;
    search?: string;
}
export declare class _ParticipantsIter extends RequestIter {
    private filterEntity;
    private requests?;
    _init({ entity, filter, search }: ParticipantsIterInterface): Promise<boolean | void>;
    _loadNextChunk(): Promise<boolean | undefined>;
    [Symbol.asyncIterator](): AsyncIterator<Api.User, any, undefined>;
}
export interface IterParticipantsParams {
    limit?: number;
    search?: string;
    filter?: Api.TypeChannelParticipantsFilter;
}
export declare function iterParticipants(client: TelegramClient, entity: EntityLike, { limit, search, filter, }: IterParticipantsParams): _ParticipantsIter;
export declare function getParticipants(client: TelegramClient, entity: EntityLike, params: IterParticipantsParams): Promise<TotalList<Api.User>>;
export {};
