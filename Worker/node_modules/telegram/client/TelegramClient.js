"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramClient = void 0;
const telegramBaseClient_1 = require("./telegramBaseClient");
const authMethods = __importStar(require("./auth"));
const botMethods = __importStar(require("./bots"));
const buttonsMethods = __importStar(require("./buttons"));
const downloadMethods = __importStar(require("./downloads"));
const parseMethods = __importStar(require("./messageParse"));
const messageMethods = __importStar(require("./messages"));
const updateMethods = __importStar(require("./updates"));
const uploadMethods = __importStar(require("./uploads"));
const userMethods = __importStar(require("./users"));
const chatMethods = __importStar(require("./chats"));
const tl_1 = require("../tl");
const Utils_1 = require("../Utils");
const markdown_1 = require("../extensions/markdown");
const network_1 = require("../network");
const AllTLObjects_1 = require("../tl/AllTLObjects");
const Helpers_1 = require("../Helpers");
class TelegramClient extends telegramBaseClient_1.TelegramBaseClient {
    // region auth
    start(authParams) {
        return authMethods.start(this, authParams);
    }
    checkAuthorization() {
        return authMethods.checkAuthorization(this);
    }
    signInUser(apiCredentials, authParams) {
        return authMethods.signInUser(this, apiCredentials, authParams);
    }
    signInUserWithQrCode(apiCredentials, authParams) {
        return authMethods.signInUserWithQrCode(this, apiCredentials, authParams);
    }
    sendCode(apiCredentials, phoneNumber, forceSMS = false) {
        return authMethods.sendCode(this, apiCredentials, phoneNumber, forceSMS);
    }
    signInWithPassword(apiCredentials, authParams) {
        return authMethods.signInWithPassword(this, apiCredentials, authParams);
    }
    signInBot(apiCredentials, authParams) {
        return authMethods.signInBot(this, apiCredentials, authParams);
    }
    authFlow(apiCredentials, authParams) {
        return authMethods.authFlow(this, apiCredentials, authParams);
    }
    //endregion auth
    //region bot
    inlineQuery(bot, query, entity, offset, geoPoint) {
        return botMethods.inlineQuery(this, bot, query, entity, offset, geoPoint);
    }
    //endregion
    //region buttons
    buildReplyMarkup(buttons, inlineOnly = false) {
        return buttonsMethods.buildReplyMarkup(buttons, inlineOnly);
    }
    //endregion
    //region download
    downloadFile(inputLocation, fileParams) {
        return downloadMethods.downloadFile(this, inputLocation, fileParams);
    }
    _downloadPhoto(photo, args) {
        return downloadMethods._downloadPhoto(this, photo, args);
    }
    _downloadCachedPhotoSize(size) {
        return downloadMethods._downloadCachedPhotoSize(this, size);
    }
    _downloadDocument(media, args) {
        return downloadMethods._downloadDocument(this, media, args);
    }
    _downloadContact(contact, args) {
        return downloadMethods._downloadContact(this, contact, args);
    }
    _downloadWebDocument(webDocument, args) {
        return downloadMethods._downloadWebDocument(this, webDocument, args);
    }
    downloadMedia(messageOrMedia, args) {
        return downloadMethods.downloadMedia(this, messageOrMedia, args);
    }
    //endregion
    //region message parse
    get parseMode() {
        return this._parseMode || markdown_1.MarkdownParser;
    }
    setParseMode(mode) {
        this._parseMode = Utils_1.sanitizeParseMode(mode);
    }
    // private methods
    _replaceWithMention(entities, i, user) {
        return parseMethods._replaceWithMention(this, entities, i, user);
    }
    _parseMessageText(message, parseMode) {
        return parseMethods._parseMessageText(this, message, parseMode);
    }
    //endregion
    // region messages
    iterMessages(entity, params) {
        return messageMethods.iterMessages(this, entity, params);
    }
    getMessages(entity, params) {
        return messageMethods.getMessages(this, entity, params);
    }
    sendMessage(entity, params) {
        return messageMethods.sendMessage(this, entity, params);
    }
    //endregion
    //region chats
    iterParticipants(entity, params) {
        return chatMethods.iterParticipants(this, entity, params);
    }
    getParticipants(entity, params) {
        return chatMethods.getParticipants(this, entity, params);
    }
    //endregion
    //region updates
    on(event) {
        return updateMethods.on(this, event);
    }
    addEventHandler(callback, event) {
        return updateMethods.addEventHandler(this, callback, event);
    }
    removeEventHandler(callback, event) {
        return updateMethods.removeEventHandler(this, callback, event);
    }
    listEventHandlers() {
        return updateMethods.listEventHandlers(this);
    }
    // private methods
    _handleUpdate(update) {
        return updateMethods._handleUpdate(this, update);
    }
    _processUpdate(update, others, entities) {
        return updateMethods._processUpdate(this, update, others, entities);
    }
    _dispatchUpdate(args) {
        return updateMethods._dispatchUpdate(this, args);
    }
    _updateLoop() {
        return updateMethods._updateLoop(this);
    }
    //endregion
    // region uploads
    uploadFile(fileParams) {
        return uploadMethods.uploadFile(this, fileParams);
    }
    sendFile(entity, params) {
        return uploadMethods.sendFile(this, entity, params);
    }
    // endregion
    //region user methods
    invoke(request) {
        return userMethods.invoke(this, request);
    }
    getMe(inputPeer = false) {
        return userMethods.getMe(this, inputPeer);
    }
    isBot() {
        return userMethods.isBot(this);
    }
    isUserAuthorized() {
        return userMethods.isUserAuthorized(this);
    }
    getEntity(entity) {
        return userMethods.getEntity(this, entity);
    }
    getInputEntity(peer) {
        return userMethods.getInputEntity(this, peer);
    }
    getPeerId(peer, addMark = false) {
        return userMethods.getPeerId(this, peer, addMark);
    }
    // private methods
    _getEntityFromString(string) {
        return userMethods._getEntityFromString(this, string);
    }
    _getPeer(peer) {
        return userMethods._getPeer(this, peer);
    }
    _getInputDialog(dialog) {
        return userMethods._getInputDialog(this, dialog);
    }
    _getInputNotify(notify) {
        return userMethods._getInputNotify(this, notify);
    }
    //endregion
    //region base methods
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._initSession();
            this._sender = new network_1.MTProtoSender(this.session.getAuthKey(), {
                logger: this._log,
                dcId: this.session.dcId || 4,
                retries: this._connectionRetries,
                delay: this._retryDelay,
                autoReconnect: this._autoReconnect,
                connectTimeout: this._timeout,
                authKeyCallback: this._authKeyCallback.bind(this),
                updateCallback: this._handleUpdate.bind(this),
                isMainSender: true,
            });
            const connection = new this._connection(this.session.serverAddress, this.session.port, this.session.dcId, this._log);
            if (!(yield this._sender.connect(connection, this._dispatchUpdate.bind(this)))) {
                return;
            }
            this.session.setAuthKey(this._sender.authKey);
            yield this.session.save();
            this._initRequest.query = new tl_1.Api.help.GetConfig();
            yield this._sender.send(new tl_1.Api.InvokeWithLayer({
                layer: AllTLObjects_1.LAYER,
                query: this._initRequest
            }));
            this._dispatchUpdate({ update: new network_1.UpdateConnectionState(1) });
            this._updateLoop();
        });
    }
    //endregion
    // region Working with different connections/Data Centers
    _switchDC(newDc) {
        return __awaiter(this, void 0, void 0, function* () {
            this._log.info(`Reconnecting to new data center ${newDc}`);
            const DC = yield this.getDC(newDc);
            this.session.setDC(newDc, DC.ipAddress, DC.port);
            // authKey's are associated with a server, which has now changed
            // so it's not valid anymore. Set to None to force recreating it.
            yield this._sender.authKey.setKey();
            this.session.setAuthKey();
            yield this.disconnect();
            return this.connect();
        });
    }
    _createExportedSender(dcId, retries) {
        return __awaiter(this, void 0, void 0, function* () {
            const dc = yield this.getDC(dcId);
            const sender = new network_1.MTProtoSender(this.session.getAuthKey(dcId), {
                logger: this._log,
                dcId: dcId,
                retries: this._connectionRetries,
                delay: this._retryDelay,
                autoReconnect: this._autoReconnect,
                connectTimeout: this._timeout,
                authKeyCallback: this._authKeyCallback.bind(this),
                isMainSender: dcId === this.session.dcId,
                senderCallback: this.removeSender.bind(this),
            });
            for (let i = 0; i < retries; i++) {
                try {
                    yield sender.connect(new this._connection(dc.ipAddress, dc.port, dcId, this._log));
                    if (this.session.dcId !== dcId) {
                        this._log.info(`Exporting authorization for data center ${dc.ipAddress}`);
                        const auth = yield this.invoke(new tl_1.Api.auth.ExportAuthorization({ dcId: dcId }));
                        this._initRequest.query = new tl_1.Api.auth.ImportAuthorization({
                            id: auth.id,
                            bytes: auth.bytes,
                        });
                        const req = new tl_1.Api.InvokeWithLayer({
                            layer: AllTLObjects_1.LAYER,
                            query: this._initRequest
                        });
                        yield sender.send(req);
                    }
                    sender.dcId = dcId;
                    return sender;
                }
                catch (e) {
                    console.log(e);
                    yield sender.disconnect();
                }
            }
            return null;
        });
    }
    getDC(dcId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Helpers_1.IS_NODE) {
                switch (dcId) {
                    case 1:
                        return {
                            id: 1,
                            ipAddress: 'pluto.web.telegram.org',
                            port: 443,
                        };
                    case 2:
                        return {
                            id: 2,
                            ipAddress: 'venus.web.telegram.org',
                            port: 443,
                        };
                    case 3:
                        return {
                            id: 3,
                            ipAddress: 'aurora.web.telegram.org',
                            port: 443,
                        };
                    case 4:
                        return {
                            id: 4,
                            ipAddress: 'vesta.web.telegram.org',
                            port: 443,
                        };
                    case 5:
                        return {
                            id: 5,
                            ipAddress: 'flora.web.telegram.org',
                            port: 443,
                        };
                    default:
                        throw new Error(`Cannot find the DC with the ID of ${dcId}`);
                }
            }
            if (!this._config) {
                this._config = yield this.invoke(new tl_1.Api.help.GetConfig());
            }
            for (const DC of this._config.dcOptions) {
                if (DC.id === dcId && !!DC.ipv6 === this._useIPV6) {
                    return {
                        id: DC.id,
                        ipAddress: DC.ipAddress,
                        port: 443,
                    };
                }
            }
            throw new Error(`Cannot find the DC with the ID of ${dcId}`);
        });
    }
    removeSender(dcId) {
        delete this._borrowedSenderPromises[dcId];
    }
    _borrowExportedSender(dcId, retries = 5) {
        return __awaiter(this, void 0, void 0, function* () {
            let senderPromise = this._borrowedSenderPromises[dcId];
            if (!senderPromise) {
                senderPromise = this._createExportedSender(dcId, retries);
                this._borrowedSenderPromises[dcId] = senderPromise;
                senderPromise.then((sender) => {
                    if (!sender) {
                        delete this._borrowedSenderPromises[dcId];
                    }
                });
            }
            return senderPromise;
        });
    }
}
exports.TelegramClient = TelegramClient;
//# sourceMappingURL=data:application/json;base64,