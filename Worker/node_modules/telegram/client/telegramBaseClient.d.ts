import type { Session } from "../sessions/Abstract";
import { Logger } from "../extensions";
import { Api } from "../tl";
import type { AuthKey } from "../crypto/AuthKey";
import { EntityCache } from "../entityCache";
import type { ParseInterface } from "./messageParse";
import type { EventBuilder } from "../events/common";
export interface TelegramClientParams {
    connection?: any;
    useIPV6?: boolean;
    timeout?: number;
    requestRetries?: number;
    connectionRetries?: number;
    retryDelay?: number;
    autoReconnect?: boolean;
    sequentialUpdates?: boolean;
    floodSleepThreshold?: number;
    deviceModel?: string;
    systemVersion?: string;
    appVersion?: string;
    langCode?: 'en';
    systemLangCode?: 'en';
    baseLogger?: string | any;
    useWSS?: false;
}
export declare class TelegramBaseClient {
    __version__: string;
    _config?: Api.Config;
    _log: Logger;
    _floodSleepThreshold: number;
    session: Session;
    apiHash: string;
    apiId: number;
    _requestRetries: number;
    _connectionRetries: number;
    _retryDelay: number;
    _timeout: number;
    _autoReconnect: boolean;
    _connection: any;
    _initRequest: Api.InitConnection;
    _sender?: any;
    _floodWaitedRequests: any;
    _borrowedSenderPromises: any;
    _bot?: boolean;
    _useIPV6: boolean;
    _selfInputPeer?: Api.InputPeerUser;
    useWSS: boolean;
    _eventBuilders: [EventBuilder, CallableFunction][];
    _entityCache: EntityCache;
    _lastRequest?: number;
    _parseMode?: ParseInterface;
    constructor(session: string | Session, apiId: number, apiHash: string, { connection, useIPV6, timeout, requestRetries, connectionRetries, retryDelay, autoReconnect, sequentialUpdates, floodSleepThreshold, deviceModel, systemVersion, appVersion, langCode, systemLangCode, baseLogger, useWSS, }: TelegramClientParams);
    get floodSleepThreshold(): number;
    set floodSleepThreshold(value: number);
    _initSession(): Promise<void>;
    get connected(): any;
    disconnect(): Promise<void>;
    get disconnected(): any;
    destroy(): Promise<void>;
    _authKeyCallback(authKey: AuthKey, dcId: number): Promise<void>;
}
