"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._getInputNotify = exports._getInputDialog = exports._getPeer = exports.getPeerId = exports._getEntityFromString = exports.getInputEntity = exports.getEntity = exports.isUserAuthorized = exports.isBot = exports.getMe = exports.invoke = void 0;
const tl_1 = require("../tl");
const Utils_1 = require("../Utils");
const Helpers_1 = require("../Helpers");
const __1 = require("../");
const big_integer_1 = __importDefault(require("big-integer"));
// UserMethods {
// region Invoking Telegram request
/**
 * Invokes a MTProtoRequest (sends and receives it) and returns its result
 * @param client
 * @param request
 * @returns {Promise}
 */
function invoke(client, request) {
    return __awaiter(this, void 0, void 0, function* () {
        if (request.classType !== 'request') {
            throw new Error('You can only invoke MTProtoRequests');
        }
        // This causes issues for now because not enough utils
        // await request.resolve(this, utils)
        yield request.resolve(client, __1.utils);
        client._lastRequest = new Date().getTime();
        let attempt;
        for (attempt = 0; attempt < client._requestRetries; attempt++) {
            try {
                const promise = client._sender.send(request);
                const result = yield promise;
                client.session.processEntities(result);
                client._entityCache.add(result);
                return result;
            }
            catch (e) {
                if (e instanceof __1.errors.ServerError || e.message === 'RPC_CALL_FAIL' ||
                    e.message === 'RPC_MCGET_FAIL') {
                    client._log.warn(`Telegram is having internal issues ${e.constructor.name}`);
                    yield Helpers_1.sleep(2000);
                }
                else if (e instanceof __1.errors.FloodWaitError || e instanceof __1.errors.FloodTestPhoneWaitError) {
                    if (e.seconds <= client.floodSleepThreshold) {
                        client._log.info(`Sleeping for ${e.seconds}s on flood wait`);
                        yield Helpers_1.sleep(e.seconds * 1000);
                    }
                    else {
                        throw e;
                    }
                }
                else if (e instanceof __1.errors.PhoneMigrateError || e instanceof __1.errors.NetworkMigrateError ||
                    e instanceof __1.errors.UserMigrateError) {
                    client._log.info(`Phone migrated to ${e.newDc}`);
                    const shouldRaise = e instanceof __1.errors.PhoneMigrateError || e instanceof __1.errors.NetworkMigrateError;
                    if (shouldRaise && (yield client.isUserAuthorized())) {
                        throw e;
                    }
                    yield client._switchDC(e.newDc);
                }
                else {
                    throw e;
                }
            }
        }
        throw new Error(`Request was unsuccessful ${attempt} time(s)`);
    });
}
exports.invoke = invoke;
function getMe(client, inputPeer = false) {
    return __awaiter(this, void 0, void 0, function* () {
        if (inputPeer && client._selfInputPeer) {
            return client._selfInputPeer;
        }
        try {
            const me = (yield client.invoke(new tl_1.Api.users
                .GetUsers({ id: [new tl_1.Api.InputUserSelf()] })))[0];
            client._bot = me.bot;
            if (!client._selfInputPeer) {
                client._selfInputPeer = __1.utils.getInputPeer(me, true);
            }
            return inputPeer ? client._selfInputPeer : me;
        }
        catch (e) {
            throw new Error("Could not get me");
        }
    });
}
exports.getMe = getMe;
function isBot(client) {
    return __awaiter(this, void 0, void 0, function* () {
        if (client._bot === undefined) {
            const me = yield client.getMe();
            if (me) {
                return !(me instanceof tl_1.Api.InputPeerUser) ? me.bot : undefined;
            }
        }
        return client._bot;
    });
}
exports.isBot = isBot;
function isUserAuthorized(client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield client.invoke(new tl_1.Api.updates.GetState());
            return true;
        }
        catch (e) {
            return false;
        }
    });
}
exports.isUserAuthorized = isUserAuthorized;
function getEntity(client, entity) {
    return __awaiter(this, void 0, void 0, function* () {
        const single = !Helpers_1.isArrayLike(entity);
        if (single) {
            entity = [entity];
        }
        const inputs = [];
        for (const x of entity) {
            if (typeof x === 'string') {
                inputs.push(x);
            }
            else {
                inputs.push(yield client.getInputEntity(x));
            }
        }
        const lists = new Map([
            [Helpers_1._EntityType.USER, []],
            [Helpers_1._EntityType.CHAT, []],
            [Helpers_1._EntityType.CHANNEL, []],
        ]);
        for (const x of inputs) {
            try {
                lists.get(Helpers_1._entityType(x)).push(x);
            }
            catch (e) {
            }
        }
        let users = lists.get(Helpers_1._EntityType.USER);
        let chats = lists.get(Helpers_1._EntityType.CHAT);
        let channels = lists.get(Helpers_1._EntityType.CHANNEL);
        if (users.length) {
            users = yield client.invoke(new tl_1.Api.users.GetUsers({
                id: users
            }));
        }
        if (chats.length) {
            const chatIds = chats.map((x) => x.chatId);
            chats = (yield client.invoke(new tl_1.Api.messages.GetChats({ id: chatIds }))).chats;
        }
        if (channels.length) {
            channels = (yield client.invoke(new tl_1.Api.channels.GetChannels(({ id: channels })))).chats;
        }
        const idEntity = new Map();
        for (const user of users) {
            idEntity.set(Utils_1.getPeerId(user), user);
        }
        for (const channel of channels) {
            idEntity.set(Utils_1.getPeerId(channel), channel);
        }
        for (const chat of chats) {
            idEntity.set(Utils_1.getPeerId(chat), chat);
        }
        const result = [];
        for (const x of inputs) {
            if (typeof x === 'string') {
                result.push(yield client._getEntityFromString(x));
            }
            else if (!(x instanceof tl_1.Api.InputPeerSelf)) {
                result.push(idEntity.get(Utils_1.getPeerId(x)));
            }
            else {
                for (const [key, u] of idEntity.entries()) {
                    if (u instanceof tl_1.Api.User && u.self) {
                        result.push(u);
                        break;
                    }
                }
            }
        }
        return single ? result[0] : result;
    });
}
exports.getEntity = getEntity;
function getInputEntity(client, peer) {
    return __awaiter(this, void 0, void 0, function* () {
        // Short-circuit if the input parameter directly maps to an InputPeer
        try {
            return __1.utils.getInputPeer(peer);
            // eslint-disable-next-line no-empty
        }
        catch (e) {
        }
        // Next in priority is having a peer (or its ID) cached in-memory
        try {
            // 0x2d45687 == crc32(b'Peer')
            if (typeof peer !== "string" && (typeof peer === 'number' || peer.SUBCLASS_OF_ID === 0x2d45687)) {
                const res = client._entityCache.get(peer);
                if (res) {
                    return res;
                }
            }
            // eslint-disable-next-line no-empty
        }
        catch (e) {
        }
        // Then come known strings that take precedence
        if (typeof peer == 'string') {
            if (['me', 'this', 'self'].includes(peer)) {
                return new tl_1.Api.InputPeerSelf();
            }
        }
        // No InputPeer, cached peer, or known string. Fetch from disk cache
        try {
            if (peer != undefined) {
                return client.session.getInputEntity(peer);
            }
            // eslint-disable-next-line no-empty
        }
        catch (e) {
        }
        // Only network left to try
        if (typeof peer === 'string') {
            return __1.utils.getInputPeer(yield client._getEntityFromString(peer));
        }
        // If we're a bot and the user has messaged us privately users.getUsers
        // will work with accessHash = 0. Similar for channels.getChannels.
        // If we're not a bot but the user is in our contacts, it seems to work
        // regardless. These are the only two special-cased requests.
        peer = __1.utils.getPeer(peer);
        if (peer instanceof tl_1.Api.PeerUser) {
            const users = yield client.invoke(new tl_1.Api.users.GetUsers({
                id: [new tl_1.Api.InputUser({
                        userId: peer.userId,
                        accessHash: big_integer_1.default.zero,
                    })],
            }));
            if (users.length && !(users[0] instanceof tl_1.Api.UserEmpty)) {
                // If the user passed a valid ID they expect to work for
                // channels but would be valid for users, we get UserEmpty.
                // Avoid returning the invalid empty input peer for that.
                //
                // We *could* try to guess if it's a channel first, and if
                // it's not, work as a chat and try to validate it through
                // another request, but that becomes too much work.
                return __1.utils.getInputPeer(users[0]);
            }
        }
        else if (peer instanceof tl_1.Api.PeerChat) {
            return new tl_1.Api.InputPeerChat({
                chatId: peer.chatId,
            });
        }
        else if (peer instanceof tl_1.Api.PeerChannel) {
            try {
                const channels = yield client.invoke(new tl_1.Api.channels.GetChannels({
                    id: [new tl_1.Api.InputChannel({
                            channelId: peer.channelId,
                            accessHash: big_integer_1.default.zero,
                        })],
                }));
                return __1.utils.getInputPeer(channels.chats[0]);
                // eslint-disable-next-line no-empty
            }
            catch (e) {
                console.log(e);
            }
        }
        throw new Error(`Could not find the input entity for ${peer}.
         Please read https://` +
            'docs.telethon.dev/en/latest/concepts/entities.html to' +
            ' find out more details.');
    });
}
exports.getInputEntity = getInputEntity;
function _getEntityFromString(client, string) {
    return __awaiter(this, void 0, void 0, function* () {
        const phone = __1.utils.parsePhone(string);
        if (phone) {
            try {
                const result = yield client.invoke(new tl_1.Api.contacts.GetContacts({
                    hash: 0
                }));
                if (!(result instanceof tl_1.Api.contacts.ContactsNotModified)) {
                    for (const user of result.users) {
                        if (!(user instanceof tl_1.Api.User) || user.phone === phone) {
                            return user;
                        }
                    }
                }
            }
            catch (e) {
                if (e.message === 'BOT_METHOD_INVALID') {
                    throw new Error('Cannot get entity by phone number as a ' +
                        'bot (try using integer IDs, not strings)');
                }
                throw e;
            }
        }
        else if (['me', 'this'].includes(string.toLowerCase())) {
            return client.getMe();
        }
        else {
            const { username, isInvite } = __1.utils.parseUsername(string);
            if (isInvite) {
                const invite = yield client.invoke(new tl_1.Api.messages.CheckChatInvite({
                    'hash': username,
                }));
                if (invite instanceof tl_1.Api.ChatInvite) {
                    throw new Error('Cannot get entity from a channel (or group) ' +
                        'that you are not part of. Join the group and retry');
                }
                else if (invite instanceof tl_1.Api.ChatInviteAlready) {
                    return invite.chat;
                }
            }
            else if (username) {
                try {
                    const result = yield client.invoke(new tl_1.Api.contacts.ResolveUsername({ username: username }));
                    const pid = __1.utils.getPeerId(result.peer, false);
                    if (result.peer instanceof tl_1.Api.PeerUser) {
                        for (const x of result.users) {
                            if (x.id === pid) {
                                return x;
                            }
                        }
                    }
                    else {
                        for (const x of result.chats) {
                            if (x.id === pid) {
                                return x;
                            }
                        }
                    }
                }
                catch (e) {
                    if (e.message === 'USERNAME_NOT_OCCUPIED') {
                        throw new Error(`No user has "${username}" as username`);
                    }
                    throw e;
                }
            }
        }
        throw new Error(`Cannot find any entity corresponding to "${string}"`);
    });
}
exports._getEntityFromString = _getEntityFromString;
function getPeerId(client, peer, addMark = false) {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof peer == 'number') {
            return __1.utils.getPeerId(peer, addMark);
        }
        if (typeof peer == 'string') {
            peer = yield client.getInputEntity(peer);
        }
        if (peer.SUBCLASS_OF_ID == 0x2d45687 || peer.SUBCLASS_OF_ID == 0xc91c90b6) {
            peer = yield client.getInputEntity(peer);
        }
        if (peer instanceof tl_1.Api.InputPeerSelf) {
            peer = yield client.getMe(true);
        }
        return __1.utils.getPeerId(peer, addMark);
    });
}
exports.getPeerId = getPeerId;
function _getPeer(client, peer) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!peer) {
            return undefined;
        }
        const [i, cls] = __1.utils.resolveId(yield client.getPeerId(peer));
        return new cls({
            userId: i,
            channelId: i,
            chatId: i
        });
    });
}
exports._getPeer = _getPeer;
function _getInputDialog(client, dialog) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (dialog.SUBCLASS_OF_ID == 0xa21c9795) { // crc32(b'InputDialogPeer')
                dialog.peer = yield client.getInputEntity(dialog.peer);
                return dialog;
            }
            else if (dialog.SUBCLASS_OF_ID == 0xc91c90b6) { //crc32(b'InputPeer')
                return new tl_1.Api.InputDialogPeer({
                    peer: dialog,
                });
            }
        }
        catch (e) {
        }
        return new tl_1.Api.InputDialogPeer({
            peer: dialog
        });
    });
}
exports._getInputDialog = _getInputDialog;
function _getInputNotify(client, notify) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (notify.SUBCLASS_OF_ID == 0x58981615) {
                if (notify instanceof tl_1.Api.InputNotifyPeer) {
                    notify.peer = yield client.getInputEntity(notify.peer);
                }
                return notify;
            }
        }
        catch (e) {
        }
        return new tl_1.Api.InputNotifyPeer({
            peer: yield client.getInputEntity(notify)
        });
    });
}
exports._getInputNotify = _getInputNotify;
//# sourceMappingURL=data:application/json;base64,