"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendFile = exports.uploadFile = exports.CustomFile = void 0;
const tl_1 = require("../tl");
const Helpers_1 = require("../Helpers");
const Utils_1 = require("../Utils");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
class CustomFile {
    constructor(name, size, path) {
        this.name = name;
        this.size = size;
        this.path = path;
    }
}
exports.CustomFile = CustomFile;
const KB_TO_BYTES = 1024;
const LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;
const UPLOAD_TIMEOUT = 15 * 1000;
function uploadFile(client, fileParams) {
    return __awaiter(this, void 0, void 0, function* () {
        const { file, onProgress } = fileParams;
        let { workers } = fileParams;
        const { name, size } = file;
        const fileId = Helpers_1.readBigIntFromBuffer(Helpers_1.generateRandomBytes(8), true, true);
        const isLarge = size > LARGE_FILE_THRESHOLD;
        const partSize = Utils_1.getAppropriatedPartSize(size) * KB_TO_BYTES;
        const partCount = Math.floor((size + partSize - 1) / partSize);
        const buffer = Buffer.from(yield fileToBuffer(file));
        // We always upload from the DC we are in.
        const sender = yield client._borrowExportedSender(client.session.dcId);
        if (!workers || !size) {
            workers = 1;
        }
        if (workers >= partCount) {
            workers = partCount;
        }
        let progress = 0;
        if (onProgress) {
            onProgress(progress);
        }
        for (let i = 0; i < partCount; i += workers) {
            let sendingParts = [];
            let end = i + workers;
            if (end > partCount) {
                end = partCount;
            }
            for (let j = i; j < end; j++) {
                const bytes = buffer.slice(j * partSize, (j + 1) * partSize);
                sendingParts.push((() => __awaiter(this, void 0, void 0, function* () {
                    yield sender.send(isLarge
                        ? new tl_1.Api.upload.SaveBigFilePart({
                            fileId,
                            filePart: j,
                            fileTotalParts: partCount,
                            bytes,
                        })
                        : new tl_1.Api.upload.SaveFilePart({
                            fileId,
                            filePart: j,
                            bytes,
                        }));
                    if (onProgress) {
                        if (onProgress.isCanceled) {
                            throw new Error('USER_CANCELED');
                        }
                        progress += (1 / partCount);
                        onProgress(progress);
                    }
                }))());
            }
            try {
                yield Promise.race([
                    yield Promise.all(sendingParts),
                    Helpers_1.sleep(UPLOAD_TIMEOUT * workers).then(() => Promise.reject(new Error('TIMEOUT'))),
                ]);
            }
            catch (err) {
                if (err.message === 'TIMEOUT') {
                    console.warn('Upload timeout. Retrying...');
                    i -= workers;
                    continue;
                }
                throw err;
            }
        }
        return isLarge
            ? new tl_1.Api.InputFileBig({
                id: fileId,
                parts: partCount,
                name,
            })
            : new tl_1.Api.InputFile({
                id: fileId,
                parts: partCount,
                name,
                md5Checksum: '', // This is not a "flag", so not sure if we can make it optional.
            });
    });
}
exports.uploadFile = uploadFile;
function sendFile(client, entity, { file, caption, forceDocument, fileSize, progressCallback, replyTo, attributes, thumb, voiceNote, videoNote, supportStreaming }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!file) {
            throw new Error("You need to specify a file");
        }
        if (!caption) {
            caption = "";
        }
        if (typeof file == "string") {
            file = new CustomFile(path_1.default.basename(file), fs_1.default.statSync(file).size, file);
        }
        const media = yield client.uploadFile({
            file: file,
            workers: 1,
            onProgress: progressCallback,
        });
        if (!attributes) {
            attributes = [];
        }
        let mimeType = "application/octet-stream";
        if (file instanceof CustomFile) {
            const result = (Utils_1.getAttributes(file, {
                attributes: attributes,
                forceDocument: forceDocument,
                voiceNote: voiceNote,
                videoNote: videoNote,
                supportsStreaming: supportStreaming,
                thumb: thumb
            }));
            mimeType = result.mimeType;
            attributes.push(...result.attrs);
        }
        let toSend;
        if (mimeType.startsWith("photo/")) {
            toSend = new tl_1.Api.InputMediaUploadedPhoto({
                file: media,
            });
        }
        else {
            toSend = new tl_1.Api.InputMediaUploadedDocument({
                file: media,
                mimeType: mimeType,
                attributes: attributes,
                forceFile: forceDocument,
            });
        }
        const result = yield client.invoke(new tl_1.Api.messages.SendMedia({
            peer: entity,
            media: toSend,
            replyToMsgId: replyTo,
            message: caption,
        }));
        // TODO get result
        return result;
    });
}
exports.sendFile = sendFile;
function fileToBuffer(file) {
    if (typeof File !== 'undefined' && file instanceof File) {
        return new Response(file).arrayBuffer();
    }
    else if (file instanceof CustomFile) {
        return fs_1.default.readFileSync(file.path);
    }
    else {
        throw new Error("Could not create buffer from file " + file);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2Fkcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9jbGllbnQvdXBsb2Fkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4QkFBMEI7QUFHMUIsd0NBQTRFO0FBQzVFLG9DQUFnRTtBQUVoRSxnREFBd0I7QUFDeEIsNENBQW9CO0FBZXBCLE1BQWEsVUFBVTtJQUtuQixZQUFZLElBQVksRUFBRSxJQUFZLEVBQUUsSUFBWTtRQUNoRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0NBQ0o7QUFWRCxnQ0FVQztBQUVELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQztBQUN6QixNQUFNLG9CQUFvQixHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQzlDLE1BQU0sY0FBYyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFFakMsU0FBc0IsVUFBVSxDQUM1QixNQUFzQixFQUN0QixVQUE0Qjs7UUFFNUIsTUFBTSxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUMsR0FBRyxVQUFVLENBQUM7UUFDdEMsSUFBSSxFQUFDLE9BQU8sRUFBQyxHQUFHLFVBQVUsQ0FBQztRQUUzQixNQUFNLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxHQUFHLElBQUksQ0FBQztRQUMxQixNQUFNLE1BQU0sR0FBRyw4QkFBb0IsQ0FBQyw2QkFBbUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLG9CQUFvQixDQUFDO1FBRTVDLE1BQU0sUUFBUSxHQUFHLCtCQUF1QixDQUFDLElBQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUM3RCxNQUFNLFNBQVMsR0FBRyxJ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