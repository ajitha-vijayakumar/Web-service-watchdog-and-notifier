"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendMessage = exports.getMessages = exports.iterMessages = exports._IDsIter = exports._MessagesIter = void 0;
const tl_1 = require("../tl");
const requestIter_1 = require("../requestIter");
const Helpers_1 = require("../Helpers");
const Utils_1 = require("../Utils");
const __1 = require("../");
const _MAX_CHUNK_SIZE = 100;
class _MessagesIter extends requestIter_1.RequestIter {
    _init({ entity, offsetId, minId, maxId, fromUser, offsetDate, addOffset, filter, search, replyTo }) {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (entity) {
                this.entity = yield this.client.getInputEntity(entity);
            }
            else {
                this.entity = undefined;
                if (this.reverse) {
                    throw new Error("Cannot reverse global search");
                }
            }
            if (this.reverse) {
                offsetId = Math.max(offsetId, minId);
                if (offsetId && maxId) {
                    if (maxId - offsetId <= 1) {
                        return false;
                    }
                }
                if (!maxId) {
                    maxId = Number.MAX_SAFE_INTEGER;
                }
            }
            else {
                offsetId = Math.max(offsetId, maxId);
                if (offsetId && minId) {
                    if (offsetId - minId <= 1) {
                        return false;
                    }
                }
            }
            if (this.reverse) {
                if (offsetId) {
                    offsetId += 1;
                }
                else if (!offsetDate) {
                    offsetId = 1;
                }
            }
            if (fromUser) {
                fromUser = yield this.client.getInputEntity(fromUser);
                this.fromId = yield this.client.getPeerId(fromUser);
            }
            else {
                this.fromId = null;
            }
            if (!this.entity && fromUser) {
                this.entity = new tl_1.Api.InputPeerEmpty();
            }
            if (!filter) {
                filter = new tl_1.Api.InputMessagesFilterEmpty();
            }
            if (!this.entity) {
                this.request = new tl_1.Api.messages.SearchGlobal({
                    q: search || '',
                    filter: filter,
                    minDate: undefined,
                    // TODO fix this smh
                    maxDate: offsetDate,
                    offsetRate: undefined,
                    offsetPeer: new tl_1.Api.InputPeerEmpty(),
                    offsetId: offsetId,
                    limit: 1,
                });
            }
            else if (replyTo !== undefined) {
                this.request = new tl_1.Api.messages.GetReplies({
                    peer: this.entity,
                    msgId: replyTo,
                    offsetId: offsetId,
                    offsetDate: offsetDate,
                    addOffset: addOffset,
                    limit: 0,
                    maxId: 0,
                    minId: 0,
                    hash: 0
                });
            }
            else if (search !== undefined || filter !== undefined || fromUser !== undefined) {
                const ty = Helpers_1._entityType(this.entity);
                if (ty == Helpers_1._EntityType.USER) {
                    fromUser = undefined;
                }
                else {
                    this.fromId = undefined;
                }
                this.request = new tl_1.Api.messages.Search({
                    peer: this.entity,
                    q: search || '',
                    filter: typeof filter === 'function' ? new filter() : filter,
                    minDate: undefined,
                    maxDate: offsetDate,
                    offsetId: offsetId,
                    addOffset: addOffset,
                    limit: 0,
                    maxId: 0,
                    minId: 0,
                    hash: 0,
                    fromId: fromUser
                });
                if (filter instanceof tl_1.Api.InputMessagesFilterEmpty && offsetDate && !search && !offsetId) {
                    try {
                        for (var _b = __asyncValues(this.client.iterMessages(this.entity, { limit: 1, offsetDate: offsetDate })), _c; _c = yield _b.next(), !_c.done;) {
                            const m = _c.value;
                            this.request.offsetId = m.id + 1;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            else {
                this.request = new tl_1.Api.messages.GetHistory({
                    peer: this.entity,
                    limit: 1,
                    offsetDate: offsetDate,
                    offsetId: offsetId,
                    minId: 0,
                    maxId: 0,
                    addOffset: addOffset,
                    hash: 0
                });
            }
            if (this.limit <= 0) {
                const result = yield this.client.invoke(this.request);
                if (result instanceof tl_1.Api.messages.MessagesNotModified) {
                    this.total = result.count;
                }
                else {
                    if ("count" in result) {
                        this.total = result.count;
                    }
                    else {
                        this.total = result.messages.length;
                    }
                }
                return false;
            }
            if (!this.waitTime) {
                this.waitTime = this.limit > 3000 ? 1 : 0;
            }
            if (this.reverse && !(this.request instanceof tl_1.Api.messages.SearchGlobal)) {
                this.request.addOffset -= _MAX_CHUNK_SIZE;
            }
            this.addOffset = addOffset;
            this.maxId = maxId;
            this.minId = minId;
            this.lastId = this.reverse ? 0 : Number.MAX_SAFE_INTEGER;
        });
    }
    _loadNextChunk() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.request) {
                throw new Error("Request not set yet");
            }
            this.request.limit = Math.min(this.left, _MAX_CHUNK_SIZE);
            if (this.reverse && this.request.limit != _MAX_CHUNK_SIZE) {
                if (!(this.request instanceof tl_1.Api.messages.SearchGlobal)) {
                    this.request.addOffset = this.addOffset - this.request.limit;
                }
            }
            const r = yield this.client.invoke(this.request);
            if (r instanceof tl_1.Api.messages.MessagesNotModified) {
                return true;
            }
            if ("count" in r) {
                this.total = r.count;
            }
            else {
                this.total = r.messages.length;
            }
            const entities = new Map();
            for (const x of [...r.users, ...r.chats]) {
                entities.set(Utils_1.getPeerId(x), x);
            }
            const messages = this.reverse ? r.messages.reverse() : r.messages;
            for (const message of messages) {
                if ((this.fromId && message.senderId != this.fromId)) {
                    continue;
                }
                if (!this._messageInRange(message)) {
                    return true;
                }
                this.lastId = message.id;
                try {
                    // if this fails it shouldn't be a big problem
                    message._finishInit(this.client, entities, this.entity);
                }
                catch (e) {
                }
                (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.push(message);
            }
            if (r.messages.length < this.request.limit) {
                return true;
            }
            if (this.buffer) {
                this._updateOffset(this.buffer[this.buffer.length - 1], r);
            }
            else {
                return true;
            }
        });
    }
    _messageInRange(message) {
        if (this.entity) {
            if (this.reverse) {
                if (message.id <= this.lastId || message.id >= this.maxId) {
                    return false;
                }
            }
            else {
                if (message.id >= this.lastId || message.id <= this.minId) {
                    return false;
                }
            }
        }
        return true;
    }
    [Symbol.asyncIterator]() {
        return super[Symbol.asyncIterator]();
    }
    _updateOffset(lastMessage, response) {
        if (!this.request) {
            throw new Error("Request not set yet");
        }
        this.request.offsetId = Number(lastMessage.id);
        if (this.reverse) {
            this.request.offsetId += 1;
        }
        if (this.request instanceof tl_1.Api.messages.Search) {
            this.request.maxDate = -1;
        }
        else {
            if (!(this.request instanceof tl_1.Api.messages.SearchGlobal)) {
                this.request.offsetDate = lastMessage.date;
            }
        }
        if (this.request instanceof tl_1.Api.messages.SearchGlobal) {
            if (lastMessage.inputChat) {
                this.request.offsetPeer = lastMessage.inputChat;
            }
            else {
                this.request.offsetPeer = new tl_1.Api.InputPeerEmpty();
            }
            this.request.offsetRate = response.nextRate;
        }
    }
}
exports._MessagesIter = _MessagesIter;
class _IDsIter extends requestIter_1.RequestIter {
    _init({ entity, ids }) {
        return __awaiter(this, void 0, void 0, function* () {
            this.total = ids.length;
            this._ids = this.reverse ? ids.reverse() : ids;
            this._offset = 0;
            this._entity = entity ? (yield this.client.getInputEntity(entity)) : undefined;
            this._ty = this._entity ? Helpers_1._entityType(this._entity) : undefined;
            if (!this.waitTime) {
                this.waitTile = this.limit > 300 ? 10 : 0;
            }
        });
    }
    [Symbol.asyncIterator]() {
        return super[Symbol.asyncIterator]();
    }
    _loadNextChunk() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const ids = this._ids.slice(this._offset, this._offset + _MAX_CHUNK_SIZE);
            if (!ids.length) {
                return false;
            }
            this._offset += _MAX_CHUNK_SIZE;
            let fromId;
            let r;
            if (this._ty == Helpers_1._EntityType.CHANNEL) {
                try {
                    r = yield this.client.invoke(new tl_1.Api.channels.GetMessages({
                        channel: this._entity,
                        id: ids
                    }));
                }
                catch (e) {
                    if (e.message == "MESSAGE_IDS_EMPTY") {
                        r = new tl_1.Api.messages.MessagesNotModified({
                            count: ids.length
                        });
                    }
                    else {
                        throw e;
                    }
                }
            }
            else {
                r = yield this.client.invoke(new tl_1.Api.messages.GetMessages({
                    id: ids
                }));
                if (this._entity) {
                    fromId = yield this.client._getPeer(this.entity);
                }
            }
            if (r instanceof tl_1.Api.messages.MessagesNotModified) {
                (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.push(...Array(ids.length));
                return;
            }
            const entities = new Map();
            for (const entity of [...r.users, ...r.chats]) {
                entities.set(__1.utils.getPeerId(entity), entity);
            }
            let message;
            for (message of r.messages) {
                if (message instanceof tl_1.Api.MessageEmpty || fromId && message.peerId != fromId) {
                    (_b = this.buffer) === null || _b === void 0 ? void 0 : _b.push(undefined);
                }
                else {
                    (_c = this.buffer) === null || _c === void 0 ? void 0 : _c.push(message);
                }
            }
        });
    }
}
exports._IDsIter = _IDsIter;
//  MessageMethods {
function iterMessages(client, entity, { limit, offsetDate, offsetId, maxId, minId, addOffset, search, filter, fromUser, waitTime, ids, reverse = false, replyTo }) {
    if (ids) {
        if (typeof ids == 'number') {
            ids = [ids];
        }
        return new _IDsIter(client, ids.length, {
            reverse: reverse,
            waitTime: waitTime
        }, {
            entity: entity,
            ids: ids
        });
    }
    return new _MessagesIter(client, limit || 1, {
        waitTime: waitTime,
        reverse: reverse
    }, {
        entity: entity,
        offsetId: offsetId,
        minId: minId,
        maxId: maxId,
        fromUser: fromUser,
        offsetDate: offsetDate,
        addOffset: addOffset,
        filter: filter,
        search: search,
        replyTo: replyTo
    });
}
exports.iterMessages = iterMessages;
function getMessages(client, entity, params) {
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function* () {
        if (Object.keys(params).length == 1 && params.limit === undefined) {
            if (params.minId === undefined && params.maxId === undefined) {
                params.limit = undefined;
            }
            else {
                params.limit = 1;
            }
        }
        const it = client.iterMessages(entity, params);
        const ids = params.ids;
        if (ids && !Helpers_1.isArrayLike(ids)) {
            try {
                for (var it_1 = __asyncValues(it), it_1_1; it_1_1 = yield it_1.next(), !it_1_1.done;) {
                    const message = it_1_1.value;
                    return [message];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (it_1_1 && !it_1_1.done && (_a = it_1.return)) yield _a.call(it_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return [];
        }
        return yield it.collect();
    });
}
exports.getMessages = getMessages;
// region Message
function sendMessage(client, entity, { message, replyTo, parseMode, formattingEntities, linkPreview = true, file, forceDocument, clearDraft, buttons, silent, schedule }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (file) {
            throw new Error("Not Supported Yet");
            //return this.sendFile();
        }
        entity = yield client.getInputEntity(entity);
        let markup, request;
        if (message instanceof tl_1.Api.Message) {
            if (buttons == undefined) {
                markup = message.replyMarkup;
            }
            else {
                markup = client.buildReplyMarkup(buttons);
            }
            if (silent == undefined) {
                silent = message.silent;
            }
            if (message.media && !(message.media instanceof tl_1.Api.MessageMediaWebPage)) {
                throw new Error("Not Supported Yet");
                /*
                                return this.sendFile(entity, message.media, {
                                    caption: message.message,
                                    silent: silent,
                                    replyTo: replyTo,
                                    buttons: markup,
                                    formattingEntities: message.entities,
                                    schedule: schedule
                                })
    
                 */
            }
            request = new tl_1.Api.messages.SendMessage({
                peer: entity,
                message: message.message || '',
                silent: silent,
                replyToMsgId: Utils_1.getMessageId(replyTo),
                replyMarkup: markup,
                entities: message.entities,
                clearDraft: clearDraft,
                noWebpage: !(message.media instanceof tl_1.Api.MessageMediaWebPage),
                scheduleDate: schedule
            });
            message = message.message;
        }
        else {
            if (formattingEntities == undefined) {
                [message, formattingEntities] = yield client._parseMessageText(message, parseMode);
            }
            if (!message) {
                throw new Error("The message cannot be empty unless a file is provided");
            }
            request = new tl_1.Api.messages.SendMessage({
                peer: entity,
                message: message.toString(),
                entities: formattingEntities,
                noWebpage: !linkPreview,
                replyToMsgId: Utils_1.getMessageId(replyTo),
                clearDraft: clearDraft,
                silent: silent,
                replyMarkup: client.buildReplyMarkup(buttons),
                scheduleDate: schedule
            });
        }
        const result = yield client.invoke(request);
        return result;
        //return client._getResponseMessage(request, result, entity);
    });
}
exports.sendMessage = sendMessage;
// TODO do the rest
//# sourceMappingURL=data:application/json;base64,