import { Api } from "../tl";
import type { Entity, EntityLike } from "../define";
import type { TelegramClient } from "../";
/**
 * Invokes a MTProtoRequest (sends and receives it) and returns its result
 * @param client
 * @param request
 * @returns {Promise}
 */
export declare function invoke<R extends Api.AnyRequest>(client: TelegramClient, request: R): Promise<R['__response']>;
export declare function getMe(client: TelegramClient, inputPeer?: boolean): Promise<Api.InputPeerUser | Api.User>;
export declare function isBot(client: TelegramClient): Promise<boolean | undefined>;
export declare function isUserAuthorized(client: TelegramClient): Promise<boolean>;
export declare function getEntity(client: TelegramClient, entity: any): Promise<Entity>;
export declare function getInputEntity(client: TelegramClient, peer: EntityLike): Promise<Api.TypeInputPeer>;
export declare function _getEntityFromString(client: TelegramClient, string: string): Promise<Api.TypeUser | Api.InputPeerUser | Api.TypeChat>;
export declare function getPeerId(client: TelegramClient, peer: EntityLike, addMark?: boolean): Promise<number>;
export declare function _getPeer(client: TelegramClient, peer: EntityLike): Promise<Api.PeerUser | Api.PeerChat | Api.PeerChannel | undefined>;
export declare function _getInputDialog(client: TelegramClient, dialog: any): Promise<any>;
export declare function _getInputNotify(client: TelegramClient, notify: any): Promise<any>;
