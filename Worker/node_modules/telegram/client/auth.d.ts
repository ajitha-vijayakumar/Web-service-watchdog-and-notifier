/// <reference types="node" />
import { Api } from '../tl';
import type { TelegramClient } from "./TelegramClient";
export interface UserAuthParams {
    phoneNumber: string | (() => Promise<string>);
    phoneCode: (isCodeViaApp?: boolean) => Promise<string>;
    password: (hint?: string) => Promise<string>;
    firstAndLastNames?: () => Promise<[string, string?]>;
    qrCode?: (qrCode: {
        token: Buffer;
        expires: number;
    }) => Promise<void>;
    onError: (err: Error) => void;
    forceSMS?: boolean;
}
interface ReturnString {
    (): string;
}
export interface BotAuthParams {
    botAuthToken: string | ReturnString;
}
export interface ApiCredentials {
    apiId: number;
    apiHash: string;
}
export declare function start(client: TelegramClient, authParams: UserAuthParams | BotAuthParams): Promise<void>;
export declare function checkAuthorization(client: TelegramClient): Promise<boolean>;
export declare function signInUser(client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams): Promise<Api.TypeUser>;
export declare function signInUserWithQrCode(client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams): Promise<Api.TypeUser>;
export declare function sendCode(client: TelegramClient, apiCredentials: ApiCredentials, phoneNumber: string, forceSMS?: boolean): Promise<{
    phoneCodeHash: string;
    isCodeViaApp: boolean;
}>;
export declare function signInWithPassword(client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams): Promise<Api.TypeUser>;
export declare function signInBot(client: TelegramClient, apiCredentials: ApiCredentials, authParams: BotAuthParams): Promise<Api.TypeUser>;
export declare function authFlow(client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams | BotAuthParams): Promise<void>;
export {};
