"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._updateLoop = exports._dispatchUpdate = exports._processUpdate = exports._handleUpdate = exports.catchUp = exports.listEventHandlers = exports.removeEventHandler = exports.addEventHandler = exports.on = void 0;
const tl_1 = require("../tl");
const __1 = require("../");
const big_integer_1 = __importDefault(require("big-integer"));
const network_1 = require("../network");
// export class UpdateMethods {
function on(client, event) {
    return (f) => {
        client.addEventHandler(f, event);
        return f;
    };
}
exports.on = on;
function addEventHandler(client, callback, event) {
    if (event == undefined) {
        // recursive imports :(
        const raw = require("../events/Raw").Raw;
        event = new raw({});
    }
    client._eventBuilders.push([event, callback]);
}
exports.addEventHandler = addEventHandler;
function removeEventHandler(client, callback, event) {
    client._eventBuilders = client._eventBuilders.filter(function (item) {
        return item !== [event, callback];
    });
}
exports.removeEventHandler = removeEventHandler;
function listEventHandlers(client) {
    return client._eventBuilders;
}
exports.listEventHandlers = listEventHandlers;
function catchUp() {
    // TODO
}
exports.catchUp = catchUp;
function _handleUpdate(client, update) {
    if (typeof update === 'number') {
        if ([-1, 0, 1].includes(update)) {
            client._dispatchUpdate({ update: new network_1.UpdateConnectionState(update) });
            return;
        }
    }
    //this.session.processEntities(update)
    client._entityCache.add(update);
    client.session.processEntities(update);
    if (update instanceof tl_1.Api.Updates || update instanceof tl_1.Api.UpdatesCombined) {
        // TODO deal with entities
        const entities = [];
        for (const x of [...update.users, ...update.chats]) {
            entities.push(x);
        }
        for (const u of update.updates) {
            client._processUpdate(u, update.updates, entities);
        }
    }
    else if (update instanceof tl_1.Api.UpdateShort) {
        client._processUpdate(update.update, null);
    }
    else {
        client._processUpdate(update, null);
    }
}
exports._handleUpdate = _handleUpdate;
function _processUpdate(client, update, others, entities) {
    update._entities = entities || {};
    const args = {
        update: update,
        others: others,
    };
    client._dispatchUpdate(args);
}
exports._processUpdate = _processUpdate;
function _dispatchUpdate(client, args) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const [builder, callback] of client._eventBuilders) {
            if (!builder.resolved) {
                yield builder.resolve(client);
            }
            let event = args.update;
            if (event) {
                if (!client._selfInputPeer) {
                    yield client.getMe(true);
                }
                if (!(event instanceof network_1.UpdateConnectionState)) {
                    // TODO fix me
                }
                event = builder.build(event);
                if (event) {
                    if ("_eventName" in event) {
                        event._setClient(client);
                        event.originalUpdate = args.update;
                        event._entities = args.update._entities;
                    }
                    const filter = yield builder.filter(event);
                    if (!filter) {
                        continue;
                    }
                    yield callback(event);
                }
            }
        }
    });
}
exports._dispatchUpdate = _dispatchUpdate;
function _updateLoop(client) {
    return __awaiter(this, void 0, void 0, function* () {
        while (client.connected) {
            const rnd = __1.helpers.getRandomInt(Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
            yield __1.helpers.sleep(1000 * 60);
            // We don't care about the result we just want to send it every
            // 60 seconds so telegram doesn't stop the connection
            try {
                client._sender.send(new tl_1.Api.Ping({
                    pingId: big_integer_1.default(rnd),
                }));
            }
            catch (e) {
            }
            // We need to send some content-related request at least hourly
            // for Telegram to keep delivering updates, otherwise they will
            // just stop even if we're connected. Do so every 30 minutes.
            // TODO Call getDifference instead since it's more relevant
            if (!client._lastRequest || new Date().getTime() - client._lastRequest > 30 * 60 * 1000) {
                try {
                    yield client.invoke(new tl_1.Api.updates.GetState());
                }
                catch (e) {
                }
            }
        }
    });
}
exports._updateLoop = _updateLoop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9jbGllbnQvdXBkYXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDQSw4QkFBMEI7QUFDMUIsMkJBQTRCO0FBRTVCLDhEQUFpQztBQUNqQyx3Q0FBaUQ7QUFHakQsK0JBQStCO0FBQy9CLFNBQWdCLEVBQUUsQ0FBQyxNQUFzQixFQUFFLEtBQVU7SUFDakQsT0FBTyxDQUFDLENBQW1CLEVBQUUsRUFBRTtRQUMzQixNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqQyxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQTtBQUNMLENBQUM7QUFMRCxnQkFLQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxNQUFzQixFQUFFLFFBQTBCLEVBQUUsS0FBb0I7SUFDcEcsSUFBSSxLQUFLLElBQUksU0FBUyxFQUFFO1FBQ3BCLHVCQUF1QjtRQUN2QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3pDLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQVEsQ0FBQztLQUM5QjtJQUNELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7QUFDakQsQ0FBQztBQVBELDBDQU9DO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUMsTUFBc0IsRUFBRSxRQUEwQixFQUFFLEtBQW1CO0lBQ3RHLE1BQU0sQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJO1FBQy9ELE9BQU8sSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ3JDLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQUpELGdEQUlDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMs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