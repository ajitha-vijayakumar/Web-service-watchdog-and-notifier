"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramBaseClient = void 0;
const __1 = require("../");
const Helpers_1 = require("../Helpers");
const connection_1 = require("../network/connection");
const extensions_1 = require("../extensions");
const sessions_1 = require("../sessions");
const tl_1 = require("../tl");
const os_1 = __importDefault(require("os"));
const entityCache_1 = require("../entityCache");
const DEFAULT_DC_ID = 1;
const DEFAULT_IPV4_IP = Helpers_1.IS_NODE ? '149.154.167.51' : 'pluto.web.telegram.org';
const DEFAULT_IPV6_IP = '2001:67c:4e8:f002::a';
class TelegramBaseClient {
    constructor(session, apiId, apiHash, { connection = Helpers_1.IS_NODE ? connection_1.ConnectionTCPFull : connection_1.ConnectionTCPObfuscated, useIPV6 = false, timeout = 10, requestRetries = 5, connectionRetries = Infinity, retryDelay = 1000, autoReconnect = true, sequentialUpdates = false, floodSleepThreshold = 60, deviceModel = '', systemVersion = '', appVersion = '', langCode = 'en', systemLangCode = 'en', baseLogger = 'gramjs', useWSS = false, }) {
        this.__version__ = __1.version;
        if (!apiId || !apiHash) {
            throw new Error("Your API ID or Hash cannot be empty or undefined");
        }
        if (typeof baseLogger == 'string') {
            this._log = new extensions_1.Logger();
        }
        else {
            this._log = baseLogger;
        }
        if (!(session instanceof sessions_1.StoreSession) && !(session instanceof sessions_1.StringSession)) {
            throw new Error("Only StringSession and StoreSessions are supported currently :( ");
        }
        this._floodSleepThreshold = floodSleepThreshold;
        this.session = session;
        this.apiId = apiId;
        this.apiHash = apiHash;
        this._useIPV6 = useIPV6;
        this._requestRetries = requestRetries;
        this._connectionRetries = connectionRetries;
        this._retryDelay = retryDelay || 0;
        this._timeout = timeout;
        this._autoReconnect = autoReconnect;
        if (!(connection instanceof Function)) {
            throw new Error("Connection should be a class not an instance");
        }
        this._connection = connection;
        this._initRequest = new tl_1.Api.InitConnection({
            apiId: this.apiId,
            deviceModel: deviceModel || os_1.default.type()
                .toString() || 'Unknown',
            systemVersion: systemVersion || os_1.default.release()
                .toString() || '1.0',
            appVersion: appVersion || '1.0',
            langCode: langCode,
            langPack: '',
            systemLangCode: systemLangCode,
            proxy: undefined, // no proxies yet.
        });
        this._eventBuilders = [];
        this._floodWaitedRequests = {};
        this._borrowedSenderPromises = {};
        this._bot = undefined;
        this._selfInputPeer = undefined;
        this.useWSS = useWSS;
        this._entityCache = new entityCache_1.EntityCache();
    }
    get floodSleepThreshold() {
        return this._floodSleepThreshold;
    }
    set floodSleepThreshold(value) {
        this._floodSleepThreshold = Math.min(value || 0, 24 * 60 * 60);
    }
    // region connecting
    _initSession() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.session.load();
            if (!this.session.serverAddress || this.session.serverAddress.includes(":") !== this._useIPV6) {
                this.session.setDC(DEFAULT_DC_ID, this._useIPV6 ? DEFAULT_IPV6_IP : DEFAULT_IPV4_IP, this.useWSS ? 443 : 80);
            }
        });
    }
    get connected() {
        return this._sender && this._sender.isConnected();
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._sender) {
                yield this._sender.disconnect();
            }
        });
    }
    get disconnected() {
        return !this._sender || this._sender.disconnected;
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                this.disconnect(),
                this.session.delete(),
                ...Object.values(this._borrowedSenderPromises).map((promise) => {
                    return promise
                        .then((sender) => sender.disconnect());
                }),
            ]);
            this._eventBuilders = [];
        });
    }
    _authKeyCallback(authKey, dcId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.session.setAuthKey(authKey, dcId);
            yield this.session.save();
        });
    }
}
exports.TelegramBaseClient = TelegramBaseClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZWdyYW1CYXNlQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2NsaWVudC90ZWxlZ3JhbUJhc2VDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkJBQTRCO0FBQzVCLHdDQUFtQztBQUNuQyxzREFBaUY7QUFFakYsOENBQXFDO0FBQ3JDLDBDQUF3RDtBQUN4RCw4QkFBMEI7QUFHMUIsNENBQW9CO0FBRXBCLGdEQUEyQztBQUkzQyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFDeEIsTUFBTSxlQUFlLEdBQUcsaUJBQU8sQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDO0FBQzlFLE1BQU0sZUFBZSxHQUFHLHNCQUFzQixDQUFDO0FBcUIvQyxNQUFhLGtCQUFrQjtJQTZCM0IsWUFBWSxPQUF5QixFQUFFLEtBQWEsRUFBRSxPQUFlLEVBQUUsRUFDbkUsVUFBVSxHQUFHLGlCQUFPLENBQUMsQ0FBQyxDQUFDLDhCQUFpQixDQUFDLENBQUMsQ0FBQyxvQ0FBdUIsRUFDbEUsT0FBTyxHQUFHLEtBQUssRUFDZixPQUFPLEdBQUcsRUFBRSxFQUNaLGNBQWMsR0FBRyxDQUFDLEVBQ2xCLGlCQUFpQixHQUFHLFFBQVEsRUFDNUIsVUFBVSxHQUFHLElBQUksRUFDakIsYUFBYSxHQUFHLElBQUksRUFDcEIsaUJBQWlCLEdBQUcsS0FBSyxFQUN6QixtQkFBbUIsR0FBRyxFQUFFLEVBQ3hCLFdBQVcsR0FBRyxFQUFFLEVBQ2hCLGFBQWEsR0FBRyxFQUFFLEVBQ2xCLFVBQVUsR0FBRyxFQUFFLEVBQ2YsUUFBUSxHQUFHLElBQUksRUFDZixjQUFjLEdBQUcsSUFBSSxFQUNyQixVQUFVLEdBQUcsUUFBUSxFQUNyQixNQUFNLEdBQUcsS0FBSyxHQUNLO1FBM0N2QixnQkFBVyxHQUFHLFdBQU8sQ0FBQztRQTRDbEIsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7U0FDdkU7UUFDRCxJQUFJLE9BQU8sVUFBVSxJQUFJLFFBQVEsRUFBRTtZQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksbUJBQU0sRUFBRSxDQUFBO1NBQzNCO2FBQU07WUFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQTtTQUN6QjtRQUNELElBQUksQ0FBQyxDQUFDLE9BQU8sWUFBWSx1QkFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sWUFBWSx3QkFBYSxDQUFDLEVBQUU7WUFDM0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO1NBQ3ZGO1FBQ0QsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztRQUM1QyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7UUFDcEMsSUFBSSxDQUFDLENBQUMsVUFBVSxZQUFZLFFBQVEsQ0FBQyxFQUFFO1lBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztTQUNuRTtRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxRQUFHLENBQUMsY0FBYyxDQUFDO1lBQ3ZDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixXQUFXLEVBQUUsV0FBVyxJQUFJLFlBQUUsQ0FBQyxJQUFJLEVBQUU7aUJBQ2hDLFFBQVEsRUFBRSxJQUFJLFNBQVM7WUFDNUIsYUFBYSxFQUFFLGFBQWEsSUFBSSxZQUFFLENBQUMsT0FBTyxFQUFFO2lCQUN2QyxRQUFRLEVBQUUsSUFBSSxLQUFLO1lBQ3hCLFVBQVUsRUFBRSxVQUFVLElBQUksS0FBSztZQUMvQixRQUFRLEVBQUUsUUFBUTtZQUNsQixRQUFRLEVBQUUsRUFBRTtZQUNaLGNBQWMsRUFBRSxjQUFjO1lBQzlCLEtBQUssRUFBRSxTQUFTLEVBQUUsa0JBQWtCO1NBQ3ZDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBRXpCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUN0QixJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFBO0lBRXpDLENBQUM7SUFHRCxJQUFJLG1CQUFtQjtRQUNuQixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSxtQkFBbUIsQ0FBQyxLQUFhO1FBQ2pDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsb0JBQW9CO0lBQ2QsWUFBWTs7WUFDZCxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUMzRixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTthQUMvRztRQUNMLENBQUM7S0FBQTtJQUdELElBQUksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3RELENBQUM7SUFFSyxVQUFVOztZQUNaLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDZCxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUE7YUFDbEM7UUFDTCxDQUFDO0tBQUE7SUFFRCxJQUFJLFlBQVk7UUFDWixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUN0RCxDQUFDO0lBRUssT0FBTzs7WUFDVCxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtvQkFDaEUsT0FBTyxPQUFPO3lCQUNULElBQUksQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7Z0JBQ25ELENBQUMsQ0FBQzthQUNMLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFBO1FBQzVCLENBQUM7S0FBQTtJQUdLLGdCQUFnQixDQUFDLE9BQWdCLEVBQUUsSUFBWTs7WUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QixDQUFDO0tBQUE7Q0FLSjtBQXRKRCxnREFzSkMifQ==