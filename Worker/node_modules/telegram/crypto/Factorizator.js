"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Factorizator = void 0;
const big_integer_1 = __importDefault(require("big-integer"));
const Helpers_1 = require("../Helpers");
class Factorizator {
    /**
     * Calculates the greatest common divisor
     * @param a {BigInteger}
     * @param b {BigInteger}
     * @returns {BigInteger}
     */
    static gcd(a, b) {
        while (b.neq(big_integer_1.default.zero)) {
            const temp = b;
            b = a.remainder(b);
            a = temp;
        }
        return a;
    }
    /**
     * Factorizes the given number and returns both the divisor and the number divided by the divisor
     * @param pq {BigInteger}
     * @returns {{p: *, q: *}}
     */
    static factorize(pq) {
        if (pq.remainder(2).equals(big_integer_1.default.zero)) {
            return { p: big_integer_1.default(2), q: pq.divide(big_integer_1.default(2)) };
        }
        let y = big_integer_1.default.randBetween(big_integer_1.default(1), pq.minus(1));
        const c = big_integer_1.default.randBetween(big_integer_1.default(1), pq.minus(1));
        const m = big_integer_1.default.randBetween(big_integer_1.default(1), pq.minus(1));
        let g = big_integer_1.default.one;
        let r = big_integer_1.default.one;
        let q = big_integer_1.default.one;
        let x = big_integer_1.default.zero;
        let ys = big_integer_1.default.zero;
        let k;
        while (g.eq(big_integer_1.default.one)) {
            x = y;
            for (let i = 0; big_integer_1.default(i).lesser(r); i++) {
                y = (Helpers_1.modExp(y, big_integer_1.default(2), pq)).add(c).remainder(pq);
            }
            k = big_integer_1.default.zero;
            while (k.lesser(r) && g.eq(big_integer_1.default.one)) {
                ys = y;
                const condition = big_integer_1.default.min(m, r.minus(k));
                for (let i = 0; big_integer_1.default(i).lesser(condition); i++) {
                    y = (Helpers_1.modExp(y, big_integer_1.default(2), pq)).add(c).remainder(pq);
                    q = q.multiply(x.minus(y).abs()).remainder(pq);
                }
                g = Factorizator.gcd(q, pq);
                k = k.add(m);
            }
            r = r.multiply(2);
        }
        if (g.eq(pq)) {
            while (true) {
                ys = (Helpers_1.modExp(ys, big_integer_1.default(2), pq)).add(c).remainder(pq);
                g = Factorizator.gcd(x.minus(ys).abs(), pq);
                if (g.greater(1)) {
                    break;
                }
            }
        }
        const p = g;
        q = pq.divide(g);
        return p < q ? { p: p, q: q } : { p: q, q: p };
    }
}
exports.Factorizator = Factorizator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmFjdG9yaXphdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2NyeXB0by9GYWN0b3JpemF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOERBQWlDO0FBQ2pDLHdDQUFrQztBQUVsQyxNQUFhLFlBQVk7SUFDckI7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQW1CLEVBQUUsQ0FBbUI7UUFDL0MsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLHFCQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQTtTQUNYO1FBQ0QsT0FBTyxDQUFDLENBQUE7SUFDWixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBb0I7UUFDakMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxxQkFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sRUFBRSxDQUFDLEVBQUUscUJBQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxxQkFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtTQUNuRDtRQUNELElBQUksQ0FBQyxHQUFHLHFCQUFNLENBQUMsV0FBVyxDQUFDLHFCQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxHQUFHLHFCQUFNLENBQUMsV0FBVyxDQUFDLHFCQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BE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