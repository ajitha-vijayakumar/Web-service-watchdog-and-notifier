import { EventBuilder, EventCommon } from "./common";
import type { EntityLike } from "../define";
import type { TelegramClient } from "../client/TelegramClient";
import { Api } from "../tl";
import { Message } from "../tl/patched";
interface NewMessageInterface {
    chats?: EntityLike[];
    func?: CallableFunction;
    incoming?: boolean;
    outgoing?: boolean;
    fromUsers?: EntityLike[];
    forwards?: boolean;
    pattern?: RegExp;
    blacklistChats?: boolean;
}
export declare class NewMessage extends EventBuilder {
    chats?: EntityLike[];
    func?: CallableFunction;
    incoming?: boolean;
    outgoing?: boolean;
    fromUsers?: EntityLike[];
    forwards?: boolean;
    pattern?: RegExp;
    private _noCheck;
    constructor({ chats, func, incoming, outgoing, fromUsers, forwards, pattern, blacklistChats }: NewMessageInterface);
    _resolve(client: TelegramClient): Promise<void>;
    build(update: Api.TypeUpdate, others?: any): NewMessageEvent | undefined;
    filter(event: NewMessageEvent): any;
    addAttributes(update: any): void;
}
export declare class NewMessageEvent extends EventCommon {
    message: Message;
    constructor(message: Message);
    _setClient(client: TelegramClient): void;
}
export {};
