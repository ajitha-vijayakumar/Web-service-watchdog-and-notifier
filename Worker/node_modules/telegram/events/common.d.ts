import { Api } from "../tl";
import type { EntityLike } from "../define";
import { ChatGetter } from "../tl/custom";
import type { TelegramClient } from "../client/TelegramClient";
export declare function _intoIdSet(client: TelegramClient, chats: EntityLike[] | EntityLike | undefined): Promise<number[] | undefined>;
interface DefaultEventInterface {
    chats?: EntityLike[];
    blacklistChats?: boolean;
    func?: CallableFunction;
}
export declare class EventBuilder {
    chats?: EntityLike[];
    private blacklistChats;
    resolved: boolean;
    func?: CallableFunction;
    constructor({ chats, blacklistChats, func }: DefaultEventInterface);
    build(update: Api.TypeUpdate, others?: null): any;
    resolve(client: TelegramClient): Promise<void>;
    _resolve(client: TelegramClient): Promise<void>;
    filter(event: any): undefined | EventBuilder;
}
interface EventCommonInterface {
    chatPeer?: EntityLike;
    msgId?: number;
    broadcast?: boolean;
}
export declare class EventCommon extends ChatGetter {
    _eventName: string;
    _entities: any;
    _messageId?: number;
    originalUpdate: undefined;
    constructor({ chatPeer, msgId, broadcast }: EventCommonInterface);
    _setClient(client: TelegramClient): void;
    get client(): TelegramClient | undefined;
}
export {};
